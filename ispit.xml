<ispit predmet='Računarske Mreže'>
	<pitanje id='1'>
		<naslov>
			Spoj računarske industrije i telekomunikacija
		</naslov>
		<prez>
			01/2:4
		</prez>
		<book>
			8
		</book>
		<laza>
			Računarske mreže se javljaju između 70ih i 80ih godina
			Spajaju računarske i telekomunikacione tehnologije
			i dalje traje razvoj računarskih mreža

			Posledice računarsko-komunikacione revolucije:
			+ Nema suštinske razlike između obrade podataka, koju
				obavljaju računari i prenosa podataka koji obavlja
				oprema za komunikaciju i prenos
			+ Nema suštinske razlike između prenosa različitih tipova
				podataka
			+ Razlike između jednoprocesorskih i višeprocesorskih
				računara i različitih tipova mreža su manje izražene

			Efekti
			+ Sve veće preklapanje računarske i telekomunikacione
				industrije
			+ Razvoj integrisanih sistema za prenos i obradu svih
				tipova podataka i informacija

		</laza>
	</pitanje>

	<pitanje id='2'>
		<naslov>
			Komunikacioni model
		</naslov>
		<prez>
			01/5:9
		</prez>
		<book>
			8
		</book>
		<laza>
			Izvor - Predajnik - Sistem za prenos - prijemnik - odredište
			Izvorni sistem su prva dva, odredišni sistem poslednja dva

			Osnovna svrha: razmena podataka između dve strane
			Primeri:
			+ veza radne stanice sa serverom putem javne telefonske linije
			+ razmena zvučnih signala između dva telefona

			Ključni elementi komunikacionog modela su gore navedeni.

			Ključni zadaci sistema za prenos podataka (12) su:
			+ Iskorišćenost
			+ Sprega uređaja SZPP
			+ Mogućnost generisanja signala koji se mogu:
			+ + Prenositi kroz sistem za prenos
			+ + Interpretirati u prijemniku

			+ Sinhronizacija predajnika i prijemnika
			+ Upravljanje razmenom
			+ Detekcija i korekcija grešaka

			+ Adresiranje
			+ Usmeravanje
			+ Mogućnost oporavka
			+ Formatiranje poruke
			+ Mere bezbednosti
			+ Upravljanje mrežom
		</laza>
	</pitanje>

	<pitanje id='3'>
		<naslov>
			Računarske mreže i distribuirani sistemi
		</naslov>
		<prez>
			01/10:13
		</prez>
		<book>
			8:9
		</book>
		<laza>
			XVIII vek - mehanika
			XIX vek - parna mašina
			XX vek - prikupljanje, obrada i distribucija podataka
			XXI vek - ???

			U početku su računari bili centralizovani
			Ovaj model je zamenjen modelom gde obradu vrši veći broj
				zasebnih ali povezanih računara - Računarska mreža
			Računari su povezani ako razmenjuju podatke
			Veza se ostvaruje na više načina:
			+ Bakarnom žicom, optičkim vlaknom
			+ Mikrotalasima, infrared ili satelitskim signalima
			Mreže mogu biti raznih veličina i oblika
			Internet i WWW nisu mreže!
			+ Internet je mreža koja povezuje druge mreže
			+ WWW je distribuirani sistem koji se izvršava preko interneta
			Kod distribuiranog sistema korisnici vide skup nezavisnih
				računara kao jedinstveni sistem
			U računarskim mrežama, korisnici su svesni postojanja različitih
				računara
			Distribuirani sistem je softverski sistem koji se izvršava u mreži
			Sličnost sa mrežama: prenose se podaci
			Razlika je u tome ko pokreće prenos: sistem ili korisnik
		</laza>
	</pitanje>

	<pitanje id='4'>
		<naslov>
			Poslovne mreže
		</naslov>
		<prez>
			01/15:17
		</prez>
		<book>
			9:11
		</book>
		<laza>
			Dijagram: Server - Mreža - Klijenti
			Deljenje resursa, gde spadaju podaci, programi, štampači,
				ostala oprema, spiskovi, računi.
			Firme mogu napraviti i koristiti virtuelnu privatnu mrežu, čak
				i kada se svi njeni računari ne nalaze u istoj zgradi, čak
				ni u istoj državi
			Komunikacija među zaposlenima:
			+ Elektronska pošta
			+ Video konferencije (VoIP)
			Transakcije sa drugim preduzećima
			Elektronska trgovina
			Softver za kontrolu verzija - git

		</laza>
	</pitanje>

	<pitanje id='5'>
		<naslov>
			Kućne mreže
		</naslov>
		<komentar>
			Ovde se misli na primenu računarskih mreža u kućnom okruženju,
			po analogiji sa prethodnim pitanjem
		</komentar>
		<prez>
			01/18:20
		</prez>
		<book>
			11:13
		</book>
		<laza>
			Pristupanje udaljenim informacijama, preko WWW
			+ Novine, biblioteke, onlajn enciklopedije
			Komunikacija između korisnika:
			+ Čet, društvene mreže, forumi...
			P2P (peer-to-peer) - komunikacije među ravnopravnim korisnicima
				decentralizovana mreža tj. bez servera
				Napster
			Telefoniranje preko interneta, video pozivi, internet radio
			Učenje na daljinu
			Interaktivna zabava - igrice
			Internet trgovina
			Mnogo drugih primera...
		</laza>
	</pitanje>

	<pitanje id='6'>
		<naslov>
			Pokretni korisnici
		</naslov>
		<prez>
			01/21:22
		</prez>
		<book>
			13:15
		</book>
		<laza>
			Prenosivi uređaji i Personalni Digitalni Asistenti
			Pristup mreži u hotelima, kolima...
			Bežične mreže i bežično umrežavanje - srodan pojam
				pojmu prenosivih uređaja ali ne i sasvim isti
			Primeri kombinacija bežičnih i pokretnih korisnika:
			B P Primena
			0 0 Stoni računari u kancelarijama
			0 1 Prenosivi računar u hotelskoj sobi
			1 0 Mreže u starim zgradama bez instalacija
			1 1 Pokretna kancelarija, LDA za inventarisanje skladišta
				mobilni telefoni...
		</laza>
	</pitanje>

	<pitanje id='7'>
		<naslov>
			Društveni aspekti upotrebe računarskih mreža
		</naslov>
		<prez>
			01/23
		</prez>
		<book>
			15:17
		</book>
		<laza>
			Mreže donose nove društvene, etičke i političke probleme
			Neprihvatljivi sadržaji u diskusionim grupama
			Poslodavci teže cenzuri elektronske pošte na poslu
			Država teži cenzuri, FBI nakon 9/11
			Nepouzdane informacije na internetu, teorije zavere
			Spam
			Ugrožena bezbednost
		</laza>
	</pitanje>

	<pitanje id='8'>
		<naslov>
			Klasifikacija računarskih mreža na osnovu tehnologije prenosa
		</naslov>
		<prez>
			02/3
		</prez>
		<book>
			17
		</book>
		<laza>
			Veze sa neusmerenim (difuznim) emitovanjem (broadcasting)
			+ Deli se jedinstveni kanal kojim putuju paketi
			+ Ponekad se usmerenje vrši ka grupi računara (multicasting)
			+ Karakteristično za geografski manje mreže
			Veze od tačke do tačke (point-to-point)
			+ Veza između izvora i odredišta (moguće preko više čvorova)
			+ Koristi se za geografski veće mreže
			+ Zove se i jednosmerno emitovanje (unicasting)
		</laza>
	</pitanje>

	<pitanje id='9'>
		<naslov>
			 Lokalne mreže
		</naslov>
		<prez>
			02/5:10
		</prez>
		<book>
			18:19
		</book>
		<laza>
			LAN. Privatne mreže unutar jedne zgrade ili jednog organizacionog
				područja, npr. univerzitetskog kampusa
			Koriste se za povezivanje ličnih računara i radnih stanica u
				kancelarijama i pogonima firmi radi zajedničkog korišćenja
				resursa i razmene informacija
			Razlikuju se od ostalih mreža po veličini, tehnologiji prenosa
				podataka i topologiji
			Veličina im je ograničena - vreme prenosa ograničeno i poznato
			Prenos pomoću kabla brzinom 10-10000 Mb/s
			Za LAN se neusmerenim emitovanjem, topologije mogu biti u obliku
			+ Magistrale (bus)
			+ Prstena (ring)
			Primer magistrale - IEEE 802.3 poznat i kao Ethernet
			+ Neusmereno emitovanje
			+ Decentralizovano upravljanje
			Primer prstena - IEEE 802.5 - token-ring mreža
			Mreže za neusmereno emitovanje se mogu podeliti na osnovu načina
				alokacije kanala na:
			+ Statičke
			+ Dinamičke: centralizovane i decentralizovane, u zavisnosti od
				toga na koji način se vrši dinamička dodela
		</laza>
	</pitanje>

	<pitanje id='10'>
		<naslov>
			Gradske mreže
		</naslov>
		<prez>
			02/11:12
		</prez>
		<book>
			19:20
		</book>
		<laza>
			MAN - Metropolitan Area Network
			Primer: Kablovska TV se od početka 90ih koristi i za internet
			Kablovski operateri su shvatili da svoju infrastrukturu mogu,
				uz manje izmene, da koriste i za u uslugu povezivanja na
				Internet, tako što bi koristili slobodan deo spektra
		</laza>
	</pitanje>

	<pitanje id='11'>
		<naslov>
			Regionalne mreže
		</naslov>
		<prez>
			02/13:17
		</prez>
		<book>
			20:21
		</book>
		<laza>
			WAN - Wide Area Network
			Pokriva veliko geografsko područje, državu ili kontinent
			Umreženi računari su povezani komunikacionom podmrežom
			Obično se sastoji od: Linija prenosa, optičkog vlakna ili 
				radio veza
			Prekidačkih elemenata - usmerivača (router)
			Ako dva usmerivača nisu direktno povezana, veza se ostvaruje
				preko drugih usmerivača
			Većina podmreža radi na principu "čuvaj i prosledi" ili na
				komutiranju paketa (commute u smislu putovanja)
			Odluke o izboru putanje se zasnivaju na algoritmu za usmeravanje
			Satelitske mreže ne rade sa komutiranjem paketa
		</laza>
	</pitanje>

	<pitanje id='12'>
		<naslov>
			Bežične mreže
		</naslov>
		<prez>
			02/17:20
		</prez>
		<book>
			21:23
		</book>
		<laza>
			Začetak sa pojavom Morzeove azbuke
			Tri kategorije:
			+ Mreže za povezivanje sistema:
				Bluetooth miševi, tastature, audio oprema i sl.
			+ Bežične lokalne mreže, IEEE 802.11
			+ Bežične regionalne mreže, mobilna telefonija
			Radiotalasna mreža mobilne telefonije je bežični sistem
				niske propusne moći
			Bežične regionalne mreže visoke propusne moći
			+ Local multipoint distribution service, LMDS, IEEE 802.16
			Bežične mreže se obično u nekoj tački povezuju sa klasičnom
				žičanom mrežom radi pristupa internetu
		</laza>
	</pitanje>

	<pitanje id='13'>
		<naslov>
			Kućne mreže
		</naslov>
		<komentar>
			Ovde se misli na tehnologije povezivanja kućnih uređaja
				i karakteristike takve mreže
		</komentar>
		<prez>
			02/21
		</prez>
		<book>
			23:24
		</book>
		<laza>
			Povezivanje kućnih aparata na mrežu
			Karakteristike (6):
			+ Laka instalacija
			+ Niske cene
			+ Jednostavno upravljanje radom mreže
			+ Visoka propusna moć
			+ Inkrementalni rast - lako dodavanje novih uređaja po potrebi
			+ Bezbednost - ne želimo da nam neko deaktivira kučni alarm!
		</laza>
	</pitanje>

	<pitanje id='14'>
		<naslov>
			Kombinovane mreže
		</naslov>
		<prez>
			02/22
		</prez>
		<book>
			24:25
		</book>
		<laza>
			Međumreže. Različite mreže se kombinuju pomoću mrežnih prolaza
				tj. gateway
			Internet je jedna posebna međumreža
			WAN povezuje više LAN-ova
			Razlikujemo pojmove mreže, podmreže i međumreže
			+ Primer mreže je LAN
			+ Primer podmreže (subnet) je telefonska infrastrktura, sve osim
				samih telefona
			+ Najčešće ako se neka mreža sastoji od delova koji pripadaju
				različitim kompanijama ili koriste različitu tehnologiju,
				npr. LAN vs WAN, onda govorimo o međumreži
		</laza>
	</pitanje>

	<pitanje id='15'>
		<naslov>
			Hijerarhije protokola
		</naslov>
		<prez>
			03/2:6
		</prez>
		<book>
			25:28
		</book>
		<laza>
			Radi jednostavnijeg projektovanja, računarske mreže se organizuju
				kao skup slojeva ili nivoa
			Broj slojeva, nazivi slojeva, sadržaj i funkcija variraju
			Svaki sloj nudi usluge sloju iznad njega
			Sloj n na jednom računaru komunicira sa slojem n na drugom
			Pravila i konvencije te komunikacije nazivaju se protokoli
			Skup slojeva i protokola naziva se arhitektura računarske mreže
			Skup protokola je lista protokola koje koristi određeni sistem

		</laza>
	</pitanje>

	<pitanje id='16'>
		<naslov>
			Problematika projektovanja slojeva
		</naslov>
		<prez>
			03/7
		</prez>
		<book>
			28:29
		</book>
		<laza>
			Adresiranje
			Pravila prenosa podataka, smer prenosa, broj logičkih kanala
				Mnoge mreže mude barem dva logička kanala, za normalne
				podatke i urgentne podatke
			Kontrola grešaka - detekcija i korekcija
			Kontrola toka - usaglašavanje brzine slanja i primanja podataka,
				rastavljanje i sastavljanje poruke, multipleksiranje,
				usmeravanje
		</laza>
	</pitanje>

	<pitanje id='17'>
		<naslov>
			Usluge sa uspostavljanjem direktne veze i bez nje
		</naslov>
		<prez>
			03/8:10
		</prez>
		<book>
			29:31
		</book>
		<laza>
			Usluga SUDV podseća na telefonski sistem, dok BUDV podseća
				na poštanski sistem
			Usluga se može opisati njenim kvalitetom
			+ Pouzdane (postoji potvrda o prijemu, file transfer)
			+ Nepouzdane (ne postoji, prenos glasa)
			Usluga datagrama je nepouzdana usluga BUDV
			Ponekad se koristi i usluga datagrama sa potvrdom o prijemu
			Postoji i usluga odgovaranja na zahteve

			Primeri:
			Pouzdan tok poruka  , Niz stranica
			Pouzdan tok bajtova , Udaljeni login
			Nepouzdana veza     , Digitalizovani glas
			Nepouzdani datagram , Spam
			Datagram sa potvrdom, Registrovan email
			Zahtev-odgovor      , Upit u bazu podataka  
		</laza>
	</pitanje>

	<pitanje id='18'>
		<naslov>
			Osnovne operacije za definisanje usluge
		</naslov>
		<prez>
			03/11:13
		</prez>
		<book>
			31:32
		</book>
		<laza>
			Usluge se zadaju skupom osnovnih operacija (primitiva)
			Primitive najčešće predstavljaju sistemske pozive

			LISTEN    , blokiraj se čekajući dolazeću vezu
			CONNECT   , uspostavi vezu sa drugom stranom koja čeka
			RECEIVE   , čekaj dolazeću poruku
			SEND      , pošalji poruku drugoj strani
			DISCONNECT, obustavi vezu

			Dijagram koji opisuje uspostavu veze, zahtev, odgovor i
			obustavu veze kod klijent-server interakcije
		</laza>
	</pitanje>

	<pitanje id='19'>
		<naslov>
			Odnos između usluga i protokola
		</naslov>
		<prez>
			03/14:16
		</prez>
		<book>
			32:33
		</book>
		<laza>
			Usluge i protokoli su različiti pojmovi ali se delimično
				preklapaju
			Usluga (service) je skup osnovnih operacija koje sloj
				obezbeđuje sloju iznad sebe
			Protokol je skup pravila o formatu i značenju paketa ili
				poruka koje se razmenjuju između procesa istog sloja
			Dijagram
			Postoji analogija sa programskim jezicima
			+ Usluga je slična apstraktnom tipu podataka jer definiše
				koje se operacije mogu izvesti ali ne i kako su one
				realizovane
			+ Protokole se odnosi na implementaciju pomenutih usluga
		</laza>
	</pitanje>

	<pitanje id='20'>
		<naslov>
			Referentni model OSI
		</naslov>
		<prez>
			04/2:7
		</prez>
		<book>
			34:36
		</book>
		<laza>
			ISO OSI - International Standard Organization - Open
				Systems Interconnection
			Ovaj model je predložila ISO kao prvi korak standardizaciji
			Ime je dobio po tome što je predviđen za komunikaciju otvorenih
				sistema odnosno sistema koji su dostupni za komunikaciju
				sa drugim sistemima
			Sastoji se od sedam slojeva
			Principi koji su doveli do ovog skupa slojeva su (5):
			+ Treba napraviti novi sloj kad god je neophodna nova apstrakcija
			+ Svaki sloj treba da ima jasno definisanu funkciju
			+ Funkciju svakog sloja treba izabrati u skladu sa definicijama
				međunarodno standardizovanih protokola
			+ Granice slojeva izabrati tako da se minimizuje protok
				informacija između slojeva
			+ Broj slojeva treba da bude dovoljno veliki da se funkcije čije
				su namene jasno različite ne bi stavljale u isti sloj, i da
				bude dovoljno mali da arhitektura ne bi bila previše složena
			OSI nije arhitektura mreže jer se ne zadaju konkretne usluge i
				protokoli za svaki sloj, naime, postoje standardi za sve
				slojeve ali oni nisu deo ovog modela
			Navedeni su slojevi i jedinica podataka koju razmenjuju protokoli
				u tom sloju

			Sloj aplikacije    , APDU
			Sloj prezentacije  , PPDU
			Sloj sesije        , SPDU
			Transportni sloj   , TPDU
			Mrežni sloj        , Packet
			Sloj veze podataka , Frame
			Fizički sloj       , Bit

			Poslednja tri sloja pripadaju protokolu podmreže
			MAC je podsloj sloja veze podataka koji se koristi kod mreža sa
				deljenim kanalom
		</laza>
	</pitanje>

	<pitanje id='21'>
		<naslov>
			Referentni model TCP/IP
		</naslov>
		<prez>
			04/8:14
		</prez>
		<book>
			36:38
		</book>
		<laza>
			Korišćen je u prvoj mreži ARPANET i koristi se na internetu
			Ime dobio prema svoja dva osnovna protokola
			ARPANET je projekat Ministarstva odbrane SAD, postojala je
				potreba da komunikaciona mreža opstane čak i ako se neke
				veze prekinu ili neki računari budu uništeni
			Sastoji se iz četiri sloja:

			Sloj aplikacije, tipični protokoli su TELNET, FTP, SMTP, DNS
			Transportni sloj, protokoli su TCP i UDP
			Internet sloj, internet protokol tj IP
			Sloj povezivanja na mrežu, fizički sloj + sloj veze podataka
				ARPANET, SATNET, Packet radio, LAN

			Internet tj. međumrežni sloj je projektovan kao mreža sa
				komutiranjem paketa, bez direktnog uspostavljanja veze,
				definiše format paketa i internet protokol IP
			Transportni sloj definiše dva protokola TCP - Transmission
				Control Protocol iliti protokol za upravljanje prenosom i
				UDP - User Datagram Protocol iliti protokol za korisničke
				datagrame
			Sloj aplikacija sadrži protokole višeg nivoa
			Sloj za povezivanje računara sa mrežom - model ne precizira
				šta se ovde događa, već samo to da se računar mora povezati
				sa mrežom
		</laza>
	</pitanje>

	<pitanje id='22'>
		<naslov>
			Poređenje referentnih modela OSI i TCP/IP
		</naslov>
		<prez>
			04/15:18
		</prez>
		<book>
			38:39
		</book>
		<laza>
			Zajedničko:
			+ Zasnovani su na konceptu skupa nezavisnih protokola
			+ Funkcionalnost slojeva je slična
			Kod modela OSI postoje tri ključna koncepta:
				Usluge, interfejsi, protokoli
			Model TCP/IP u početku nije povukao jasnu razliku između
				ova tri koncepta
			OSI bolje skriva protokole
			OSI je osmišljen pre protokola pa je opštiji, ovo mu je ujedno
				i mana jer je osmišljen pre nego što je postojalo neko
				iskustvo
			TCP/IP se pojavio posle protokola pa se, naravno, protokoli
				savršeno uklapaju u model. Nedostatak je što se model
				ne uklapa ni u jedan drugi skup protokola
			Razlika je u broju slojeva i u načinu uspostave veze
		</laza>
	</pitanje>

	<pitanje id='23'>
		<naslov>
			Kritika modela OSI i njegovih protokola
		</naslov>
		<prez>
			04/19:22
		</prez>
		<book>
			39:41
		</book>
		<laza>
			Četiri stavke:
			Loš tajming - po teoriji Dejvida Klarka sa MIT-a, kada
				se neki subjekat otkrije, postoji pik aktivnosti, zatim
				zatišje, a zatim počinje period investicija, kada
				aktivnost ponovo dostigne pik. Standarde treba napisati
				između ova dva pika u zatišju. Ako se standardi napišu
				prerano, moguće je da neka kasnija istraživanja pokažu
				da je, tada već napisani standard loš. Ako se standard
				napiše prekasno kada već počnu investicije, može se desiti
				da svaka kompanija sama pravi svoj standard i onda imamo
				situaciju da paralelno postoji nekoliko, često nekompati-
				bilnih standarda
			Loša tehnologija - izbor 7 slojeva je više političke prirode
				jer su prezentacioni i sloj sesija praktično prazni tj.
				nekorišćeni dok su slojevi veze podataka i mrežni prepuni,
				misli se na obim funkcija koje obavljaju. Takođe, ovaj
				model je jako složen, a neke funkcije se ponavljaju u par
				slojeva
			Loša realizacija - složenost modela i protokola izaziva da je
				implementacija glomazna i spora, nasuprot tome TCP/IP je
				bio deo Berkeley UNIX-a, dobar i besplatan
			Loša politika - za OSI se smatralo da je kreiran od strane
				birokrata iz raznih evropsnih ministarstava za
				telekomunikacije, Evropske zajednice (Unije) i vlade SAD,
				dok je TCP/IP bio deo UNIX-a
		</laza>
	</pitanje>

	<pitanje id='24'>
		<naslov>
			Kritika referentnog modela TCP/IP
		</naslov>
		<prez>
			04/23:24
		</prez>
		<book>
			41:42
		</book>
		<laza>
			Problemi
			+ Ne razgraničava jasno koncepte usluge, interfejsa i protokola.
				Traljavo razlikovanje specifikacije i realizacije
			+ Model nije uopšten i ne može se koristiti ni za jedan drugi
				stek protokola
			+ Sloj za povezivanje računara sa mrežom je pre interfejs nego
				sloj
			+ Ne razdvaja sloj veze podataka i fizički sloj
			+ Mnogi protokoli osim IP i TCP rađeni su na brzinu

			Model OSI bez slojeva sesije i prezentacije je koristan za
				izučavanje mreža no njegovi protokoli se i ne koriste
			Model TCP/IP praktično i ne postoji ali se njegovi protokoli
				masivno koriste
			Koristićemo hibridni model od 5 slojeva - OSI bez sloja sesije
				i prezentacije
		</laza>
	</pitanje>

	<pitanje id='25'>
		<naslov>
			ARPANET
		</naslov>
		<prez>
			05/2:16
		</prez>
		<book>
			42:45
		</book>
		<laza>
			Internet je danas najinteresantniji proizvod evolucije računarskih
				mreža. Naime, ne radi se o jednoj mreži, već o skupu
				različitih mreža u kojima se koriste zajednički protokoli i
				obezbeđuju zajedničke usluge
			Preteča Interneta je ARPANET.

			Istorija ARPANET-a

			Krajem 50. godina XX veka DoD US je bila potrebna komandno-
				-kontrolna mreža koja bi mogla da izdrži nuklearni udar
			U to vreme je korišćen javni telefonski sistem koji je bio ranjiv
				zbog svoje topologije stabla
			Oko 1960. zatraženo je od korporacije RAND da pronađe rešenje
			Pol Baran je predložio distribuiranu mrežu sa komutiranjem paketa
			DoD je zadužio ATnT da izgradi prototip ali oni su to odbili da
				urade jer nisu hteli da uvaže Baranovu ideju
			Formirana je agencija ARPA (Advanced Research Project Agency) koja
				oko 1967 počinje rad na umrežavanju.
			Njen direktor Leri Roberts usmerava ARPA da radi na umrežavanju.
			On se upoznao sa sličnim projektom u Engleskoj koji je citirao
				Baranov rad, što je dovelo do nastanka ARPANET-a

			Tehnička realizacija

			ARPA je odabrala konsultantsku firmu BBN iz Kembridža, Masačusets
				da realizuje podmrežu
			Podmreža se sastojala od miniračunara - IMP (Interface Message
				Processor), koji su bili povezani linijama brzine 56kbps
			Svaki IMP je bio povezan sa bar još druga dva
			Podmreža je datagramska
			Čvor mreže se sastojao od IMP i umreženog računara
			Računar šalje poruke IMP-u, dužine maks 8063 bita a on ih deli
				na pakete od 1008 bitova.
			Ulogu IMP su činili računari Honeywell DDP-316 sa memorijom od
				12 kB i 16-bitnim rečima, i nisu imali diskove jer je smatrano
				da su mehanički delovi nepouzdani
			Softver je podeljen na dve celine, za podmrežu i (krajnje) računare
			Softver za podmrežu je izvršavao protokol za vezu dva uzastopna
				IMP, ali i za vezu između izvornog i odredišnog IMP-a radi
				veće pouzdanosti, kao i softver za vezu host-IMP
			Softver van podmreže je izvršavao hostovski kraj veze host-IMP,
				zatim protokol za vezu između računara i aplikacioni softver
			Nakon što je uspeo prenos poruka, BBN je smatrala posao završenim,
				pa se javio nedostatak softvera
			Eksperimentalna mreža puštena je u rad 1969 i imala je 4 čvora,
				nakon čega je neprestano rasla
			ARPA je takođe istraživala upotrebu satelitskih mreža za mobilni
				paketni radio (Eksperiment sa kamionom koji vozi po Kaliforniji
				a poruke stižu do Londona preko ARPANET-a i satelitskih veza)
			Nastavljen je rad na protokolima što je dovelo do stvaranja
				modela TCP/IP (1974) i njegovih protokola.
			Pojava Socketa, LAN-a i DNS-a (1980e)
		</laza>
	</pitanje>

	<pitanje id='26'>
		<naslov>
			NSFNET
		</naslov>
		<prez>
			05/17:19
		</prez>
		<book>
			45:47
		</book>
		<laza>
			Krajem 70ih, NSF (National Science Foundation) uočava značaj
				mreža i projektuje naslednika ARPANET-a
			Izrađena je okosnica (backbone) sa 6 centara, gde je svakom
				superračunaru dodat mikroračunar LSI-11
			Brzina prenosa je u početku bila 56kbps koja je kasnije bila
				povećana jer se prešlo na korišćenje optičkij vlakana
			Izgrađeno je dvadesetak regionalnih mreža, povezanih na NSFNET
			ANS (Advanced Networks and Services) je preuzeo NSFNET, povećao
				brzinu do 45 Mbps (ANSNET), a zatim je ova mreža prodata
				kompaniji America Online (AOL)
		</laza>
	</pitanje>

	<pitanje id='27'>
		<naslov>
			Teorijske osnove prenosa podataka
		</naslov>
		<prez>
			06/2:17
		</prez>
		<book>
			66:69
		</book>
		<laza>
			Jedan od načina za prenos podataka je bakarnom žicom, menjajući
				njena električna svojstva - napon ili struju
			Ako promene vrednosti napona ili struje predstavimo funkcijom
				od vremena f(t), onda možemo vršiti modeliranje signala i
				njegovu analizu.
			Furijeova analiza
			Osnovna teorema:
			Neka je g(t) funkcija sa periodom T odnosno frekvencijom f=1/T.
			Bez ulaženja u matematičke detalje, zahteva sa da funkcija bude
				integrabilna. Svakako, funkcije fizičkih veličina spadaju
				u ovaj skup.
			Važi:

			g(t) = c/2 + Series[a_n sin(2 pi n f t)] +
				Series[b_n cos(2 pi n f t)]
			Gde je:
			
			a_n = 2/T Int[g(t) sin (2 pi n f t) dt, [0, T]]
			b_n = 2/T Int[g(t) cos (2 pi n f t) dt, [0, T]]
			c   = 2/T Int[g(t) dt, [0, T]]

			Različite komponente u Furijeovom razvoju različito slabe, što
				ima za posledicu izobličenje signala.
			Za neki kanal, amplitude signala se prenose bez slabljenja od
				frekvencije 0 do neke granične frekvencije fc
			Ovaj opseg naziva se propusni opseg tj. bandwidth
			Kako zavisnost slabljenja od frekvencije nije "oštra" funkcija,
				več neprekidna, za graničnu frekvenciju se uzima ona pri
				kojoj snaga signala opadne na 0.5
			Propusni opseg je fizičko svojstvo transportnog medijuma
			Ponekad se ovaj opseg ograničava upotrebom filtera.
				Moguće je ograničiti ovaj opseg i sa donje strane, tako
				da donja granica ne bude 0 Hz
			Zavisnost brzine prenosa, propusnog opsega i broja harmonika.
				Ovde se za osnovnu frekvenciju uzima vreme da se prenese
				jedan bajt
			Primer: Ako je fc = 3000 Hz, želimo da pošaljemo signal sa prvih
				10 harmonika, prvi harmonik će imati frekvenciju 300 Hz i
				možemo prenositi 300 * 8 = 2400 bitova u sekundi.

			Ograničenja:

			Henri Nikvist je 1924. otkrio da i savršeni kanal ima ograničeni
				kapacitet prenosa, a Klod Šenon je 1948. proširio Nikvistovu
				jednačinu na kanale sa termičkim šumom.

			Nikvistova teorema glasi: ako se proizvoljni signal prenosi kroz
				filter propusnog opsega H (bez slabljenja do H, nakon H
				apsolutno slabljenje), tada se filtrirani signal može
				rekonstruisati ako se uzorkuje brzinom 2H uzoraka u sekundi
			Ako u sistemu ima V diskretnih nivoa, onda je najveća brzina
				prenosa u bitovima po sekundi 2H log2 V
			Definicija decibela
			Šenonova jednačina: H log2(1 + S/N)
			Vrednost S/N (signal to noise ratio) se navodi u decibelima
				30 dB = 1000
		</laza>
	</pitanje>

	<pitanje id='28'>
		<naslov>
			Fizički medijumi za prenos podataka
		</naslov>
		<prez>
			06/18:22
		</prez>
		<book>
			70:73
		</book>
		<laza>
			Magnetni medijumi - nisu svojstveni računarskim mrežama
				ali ne treba ih zanemariti kao medijum za prenos podataka
			
			Upredena parica (Twisted pair)
			+ Dve izolovane bakarne žice, umotane - razlog je što se
				dve paralelne bakarne žice ponašaju kao veoma efikasna
				antena
			+ 3. kategorija - 16 MHz
			+ 5. kategorija - 100 MHz - 1988
			+ 6. kategorija - 250 MHz
			+ 7. kategorija - 600 MHz
			+ Sve ove kategorije spadaju u unshielded twistet pair - UTP
			
			Koaksijalni kabl
			+ Bakarno jezgro, izolator, cilindrična bakarna mrežica,
				spoljni izolator
			+ Koristi se kabl impedanse 50 Oma za digitalni prenos
			+ 70 Oma za analogne podatke, kablovsku TV i kablovski internet

			Optičko vlakno
			+ Sastoji se od svetlosnog izvora, prenosnog medijuma i
				detektora
			+ Svetlosni impuls kodira bit 1, njegovo odsustvo bit 0
			+ Totalno unutrašnje prelamanje omogućava da svetlosni signal
				putuje u vlaknu bez prelamanja
			+ Kroz vlakno se istovremeno može prostirati veći broj talasa
				sa različitim uglovima prelamanja - višerežimsko vlakno
			+ Ako je vlakno debljine svega nekoliko talasnih dužina onda
				se ono ponaša kao talasovod, ona su skuplja ali se koriste
				za veće razdaljine - bez slabljenja do 100 Km brzinom
				od 50 Gbit/s
		</laza>
	</pitanje>

	<pitanje id='29'>
		<naslov>
			Bežični prenos podataka
		</naslov>
		<prez>
			06/23:26
		</prez>
		<book>
			76:78
		</book>
		<laza>
			Neki autori smatraju da će se u budućnosti veze ostvarivati
				optičkim vlaknom ili bežično
			EM talase je predvideo Maksvel 1856. a dokazao Herc 1887.
			Elementi sistema za bežični prenos podataka su električno kolo
				na predajniku, antena, prostor, prijemnik (antena i kolo)
			Brzina EM talasa u vakuumu je oko 3e8 mps, u vazduhu skoro isto
				ovoliko, a u bakru ili optičkom vlaknu brzina prostiranja
				je oko 2/3 ove vrednosti
			Odnos između frekvencije, talasne dužine i brzine svetlosti u
				nekoj sredini je Lf = c
			EM spektar
			Veza između širine talasnog opsega i frekventnog opsega je
			df = c dL / L^2
		</laza>
	</pitanje>

	<pitanje id='30'>
		<naslov>
			Projektovanje sloja veza podataka
		</naslov>
		<prez>
			07/2:5
		</prez>
		<book>
			135
		</book>
		<laza>
			Susedni računari su oni koji su međusobno povezani komunikacionim
				kanalom koji se ponaša kao žica, što znači da ubrajamo i
				bežičnu vezu od tačke do tačke. Za ovakav kanal važi da
				će bitovi biti isporučeni onim redosledom kojim su poslati
			Funkcije sloja veze podataka ostvaruju se kroz:
			+ Dobro definisan interfejs ka mrežnom sloju
			+ Obradi grešaka pri prenosu
			+ Upravljanje tokom podataka, tako da brži računar ne može da
				preplavi sporiji računar
			Sloj veze podataka preuzima pakete koje dobija od mrežnog sloja
				i inkapsulira ih u okvire (frames) pogodne za transport
			Okvir se sastoji od zaglavlja, polja za korisničke podatke
				(payload) i završnog bloka (trailer)
			Najvažniji posao sloja veze podataka je upravo rad sa okvirima
		</laza>
	</pitanje>

	<pitanje id='31'>
		<naslov>
			Usluge koje se obezbeđuju za mrežni sloj
		</naslov>
		<prez>
			07/6:9
		</prez>
		<book>
			136:137
		</book>
		<laza>
			Osnovna usluga je prenos podataka sa mrežnog sloja
				izvorišnog računara na mrežni sloj odredišnog računara
			Dijagram virtuelnog i stvarnog puta podataka
			Obično postoje sledeće usluge (3):
			+ Prenos podataka bez uspostavljanja direktne veze i bez
				potvrde o njihovom prijemu
			+ Prenos podataka bez uspostavljanja direktne veze ali sa
				potvrdom o njihovom prijemu
			+ Prenos podataka sa uspostavljanjem direktne veze i sa
				potvrdom o njihovom prijemu
			Primer: dijagram koji prikazuje dva susedna rutera i odnos
				između mrežnog sloja i sloja veze podataka
		</laza>
	</pitanje>

	<pitanje id='32'>
		<naslov>
			Uokviravanje
		</naslov>
		<prez>
			07/10:18
		</prez>
		<book>
			137:140
		</book>
		<laza>
			Sloj veze podataka pruža usluge mrežnom sloju a koristi usluge
				fizičkog sloja
			Fizički sloj prihvata i isporučuje tok podataka ne garantujući
				ispravnost
			Zadatak sloja veze je da otkrije greške i po mogućstvu ih ispravi
			On deli podatke u okvire neke konkretne veličine i računa sumu
				provere (checksum)
			Postoje sledeće metode uokviravanja:
			+ Prebrojavanje znakova
				Ne koristi se jer ako se pogrešno prenese polje koje broji
				znakove, posledica je da neće moći da se nađe početak sledećeg
				frejma, čak i ako se koristi suma provere
			+ Korišćenje indikatorskog bajta (byte stuffing)
				FLAG i ESC bajt. Problem je što neke mreže nisu orijentisane
				ka prenosu 8-bitovskih jedinica (npr. UNICODE ima 16)
			+ Umetanje bitova
				Frejm počinje i završava se sa nizom 01111110, a u podacima
				se svaki put kada se naiđe na 5 uzastopnih jedinica, umetne
				jedna nula
			U nekim lokalnim mrežama se jedan bit podataka kodira preko dva
				fizička bita: 1 se predstavlja sa 10 a 0 sa 01. Ovo olakšava
				nalaženje granice bitova. Kod nekih protokola se 00 ili 11
				koriste za razgraničenje susednih okvira
			Moguće je i kombinovanje prebrojavanja znakova sa nekom drugom
				metodom
		</laza>
	</pitanje>

	<pitanje id='33'>
		<naslov>
			Kontrola grešaka i upravljanje tokom kod mrežnog sloja
		</naslov>
		<prez>
			07/19:22
		</prez>
		<book>
			140:141
		</book>
		<laza>
			Kako da budemo sigurni da su svi okviri isporučeni mrežnom sloju
				primaoca i to ispravnim redosledom?
			Pouzdanost isporuke se obezbeđuje tako što pošiljalac vraća vraća
				upravljačke okvire sa potvrdom
			Tajmeri se uvode za slučaj da se okvir potpuno izgubi.
			Da se ne bi	više puta primio isti okvir koriste se redni brojevi
			Postoje dve strategije upravljanja tokom (brzina slanja):
			+ Na osnovu povratnih informacija (ovaj se najčešće koristi u DLL)
			+ Na osnovu ograničenja brzine
		</laza>
	</pitanje>

	<pitanje id='34'>
		<naslov>
			Kodovi za ispravljanje grešaka
		</naslov>
		<prez>
			07/21:32
		</prez>
		<book>
			141:143
		</book>
		<laza>
			Postoje dve strategije kod obrade grešaka:

			+ U svaki blok podataka uključuje se i redundantni deo pomoću
				kojeg primalac zaključuje šta su stvarni podaci. Ovo se još
				naziva i forward error correction
			+ U redundantni deo se dodaje samo onoliko podataka koliko je
				dovoljno da se zaključi da li je došlo do greške

			Na visoko pouzdanim kanalima kao što je optičko vlakno efikasnije
				je koristiti detekciju a na kanalima sa visokom učestanošću
				grešaka je efikasnija prva metoda

			Pojam Hemingovog rastojanja, hemingova distanca koda. Za detekciju
				treba d+1, za korekciju 2d+1
			Bit parnosti - jednostavan način za detekciju 1 greške
			Primer hemingovog koda za detekciju dvostruke greške:
				{00000, 11111} ^ 2
			Jednačina donje granice za broj bitova potrebnih za ispravljanje
				jednostrukih grešaka: m + r + 1 &lt;= 2^n, sa izvođenjem
			Ovu granicu je moguće dostići Hemingovom metodom, opis algoritma

			Modifikacija Hemingovog koda za korekciju rafalnih grešaka dužine
				najviše k. Uzmemo k kodnih reči (dobijenih nakon primene H.A.
				, smestimo ih u vrste matrice a zatim pošaljemo kolone. Ako
				dođe do rafalne greške dužine do k, znamo da nijedna vrsta
				neće imati više od jednog pogrešnog bita, pa će HA korektno
				naći polazne kodne reči
		</laza>
	</pitanje>

	<pitanje id='35'>
		<naslov>
			Kodovi za otkrivanje grešaka
		</naslov>
		<prez>
			07/33:49
		</prez>
		<book>
			143:146
		</book>
		<laza>
			Počnimo sa primerom
			Ako je učestalost grešaka 1e-6 po bitu a veličina bloka 1000
				bitova, potrebno je 10 kontrolnih bitova na 1000 bitova poruke
				za korekciju grešaka
			Za 1 megabit podataka treba nam 10000 kontrolnih bitova.
			Ako umesto umesto ovoga koristimo samo detekciju jednostruke greške
				tj bit parnosti, u proseku ćemo imati jednu grešku na megabit
				podataka pa ćemo jednom morati da pošaljemo ceo blok ponovo.
				Kako taj jedan blok ima 1001 bit a potrošili smo 1000 bitova
				(po jedan za svaki blok) na detekciju grešaka, utrošili smo
				2001 bit, što je dosta manje nego 10000 drugom tehnikom.
			Poenta priče - zaista je nekad bolje koristiti
				samo detekciju grešaka

			Rafalne greške
			Ako se bloku priključi samo jedan bit parnosti pa takav blok bude
				izobličen dugačkom rafalnom greškom, verovatnoća da će ona biti
				otkrivena je samo 0.5
			Zašto - posmatrajmo skup svih rafalnih grešaka dužine n, gde je n
				bar 3. Tačno polovina njih će biti prihvaćena tj. imaće istu
				parnost kao originalni blok.
			Verovatnoća se može poboljšati ako se blok posmatra kao matrica sa
				n kolona i k vrsta, gde se bit parnosti računa za svaku kolonu.
			Ovom metodom se može otkriti svaka rafalna greška dužine ne više
				od n.
			Ako je blok izobličen dužom rafalnom greškom ili dejstvom više
				kraćih rafala, verovatnoća da će biti prihvaćen kao ispravan
				je 2^-n. Verovatnoća da je neka kolona ispravna je 0.5, a ima
				ih n, i ako smatramo da su njihove ispravnosti međusobno
				nezavisne, dolazimo do pomenutog rezultata

			U praksi se koristi druga metoda: CRC (Cyclic Redundancy Check)
			Sekvenca bitova posmatra se kao polinom u Z_2[x]
			Pošiljalac i primalac moraju da se slože oko generatorskog
				polinoma G(x) - prvi i poslednji bit moraju biti jedinice.
			Algoritam:
			+ Ako je r stepen polinoma G, dodamo r nula na kraj manje težine
				okvira, tako dobijamo polinom x^r M(x)
			+ Nalazimo ostatak T(x) pri deljenju x^r M(x) sa G(x)
			+ Rezultat je polinom x^r M(x) - T(x)
				Pošto radimo aritmetiku sa polinomima po modulu 2, ovo je isto
				kao polinom x^r M(x) + T(x).
			Napomenimo da T(x) ne može da ima stepen veći od r-1 odnosno više
				od r bitova
			Na osnovu definicije lako se pokazuje da je T(x) deljiv sa G(x).
			Primalac prima T'(x) = T(x) + E(x). U slučaju greške je E(x)
				različito od nula polinoma.
			Propustiće se greške koje odgovaraju polinomima čiji je činilac
				G(x) a ostale se detektuju

			Osobine G(x) i tipovi grešaka

			Jednobitna greška, x^i, sigurna detekcija ako G(x) sadrži bar dva
				člana
			Dvobitna greška, x^i + x^j = x^j(x^(i-j) + 1), ako G(x) nije
				deljivo sa x, dovoljan uslov za otkrivanje svih dvostrukih
				grešaka je da G(x) ne deli polinom x^k + 1 za svako k do
				maksimalne vrednosti i-j, odnosno dužine okvira - 1
			Ako E(x) ima neparan broj bitova onda će ga detektovati svako
				G(x) koje ima paran broj bitova - dokaz preko polinoma x+1
			Poznati su polinomi niskog stepena koji mogu da zaštite dugačke
				okvire, npr (15, 14, 1) ne deli (k, 1) za k do 32768
			Svaka rafalna greška dužine do r će biti otkrivena ukoliko G(x)
				nije deljivo sa x
			Rafalna greška dužine r + 1 biće prihvaćena samo ukoliko je ona
				identična polinomu G(x), verovatnoća za ovo je 1/2^(r-1)
			U IEEE 802 koristi se polinom (32, 26, 23, 22, 16, 12, 11,
				8, 7, 5, 4, 2, 1, 0)
		</laza>
	</pitanje>

	<pitanje id='36'>
		<naslov>
			Protokol HDLC
		</naslov>
		<prez>
			07/50:57
		</prez>
		<book>
			172:174
		</book>
		<laza>
			High-level Data Link Control
			Protokol za upravljanje povezivanjem podataka na visokom nivou
			HDLC je protokol čije se varijante decenijama koriste i imaju
				mnoge primene
			Grupa bliskih protokola nastala iz protokola sloja veze
				korišćenog kod IBM-ovih centralizovanih računara - SDLC
				odn. Synchronous DLC
			IBM je predložio SDLC organizacijama ANSI i ISO, ANSI je napravio
				modifikaciju ADDCP - Advanced Data Communication Control
				Procedure, a ISO HDLC
			CCITT je usvojio modifikaciju ISO-ovog HDLC-a za svoj Link
				Access Procedure kao deo standarda za mrežni interfejs X.25
				i kasniju modifikaciju LAPB
			Svi pomenuti protokoli su bazirani na istom principu:
			+ Bit orijentisani su
			+ Koriste umetanje bitova
			Svi bit-orijentisani protokoli koriste strukturu okvira:
			+ 8 bitova 01111110
			+ 8 bitova za adresu
			+ 8 kontrolnih bitova
			+ 0 ili više bitova podataka
			+ 16 bitova kontrolna suma
			+ 8 bitova 01111110
			Sadržaj polja Control određuje vrstu okvira. Postoje tri tipa:
			Bitovi su navedeni od najlakših do najtežih. Veliki propust knjige
			+ a) Informacioni (0, Seq3, P/F, Next)
			+ b) Supervizorski (1, 0, Tip, P/F, Next)
			+ c) Nenumerisani (1, 1, Tip, P/F, Modifier)
			Protokoli koriste klizne prozore i trobitne redne brojeve
			U svakom trenutku na vezi sme da bude do 7 nepotvrđenih okvira
			Seq i Next se koriste za sinhronizaciju, next sadrži sledeći
				očekivani okvir
			P/F (Poll/Final) se koristi kada računar poziva grupu terminala.
				U svim okvirima sem poslednjeg je vrednost P, u poslednjem F
			Type razlikuje tipove supervizorskih okvira:
			+ 0 RECEIVE READY
				koristi se kao ACK kada ne postoji saobraćaj u drugom smeru
				koji bi potvrdio prijem poruke
			+ 1 REJECTED
				okvir sa rednim brojem Next je odbijen i očekuje se da se
				ponovo pošalje
			+ 2 RECEIVE NOT READY
				potvrđuju se svi okviri do Next ali se nalaže drugoj strani
				da prestane da šalje
			+ 3 SELECTIVE REJECT
				zahteva se ponovno slanje okvira Next

			Nenumerisani okviri sa koriste za upravljanje ali takođe mogu i
				da nose podatke, ako je zatražena nepouzdana usluga bez
				uspostave veze

			Polje Address se koristi na linijama sa više terminala, gde
				identifikuje jedan od terminala

			Checksum se računa pomoću CRC

		</laza>
	</pitanje>

	<pitanje id='37'>
		<naslov>
			Protokol PPP
		</naslov>
		<prez>
			07/58:65
		</prez>
		<book>
			174:176
		</book>
		<laza>
			Point to Point Protocol je protokol kojim se kućni računari
				povezuju na internet, priča o LAN-u i gateway ruteru
			Razlikuje se od HDLC po tome što je bajt-orijentisan ali mu
				je struktura slična
			Ovaj protokol obrađuje greške, podržava više protokola i
				omogućuje dogovaranje IP adresa (ISP - klijent)
			Obezbeđuje 3 stvari:
			+ Metodu uokviravanja
			+ Protokol za upravljanje vezom (LCP), koji se koristi za
				podizanje linija, testiranje, dogovaranje opcija i njihovo
				zatvaranje
			+ Dogovaranje opcija mrežnog sloja nezavisno od njegovog
				protokola. Ovo je urađeno tako što postoji različiti NCP
				za svaki podržani mrežni sloj
			Use case:
			Najčešće PC želi da izvršava skup protokola TCP/IP i zato
				traži IP adresu. Protokol NCP prilagođen za IP dodeljuje
				tu adresu
			Po završetku rada, NCP prekida vezu u mrežnom sloju i oslobađa
				IP adresu
			Zatim LCP prekida vezu u sloju veze podataka
			Računar nalaže modemu da prekine vezu u fizičkom sloju
			Format PPP okvira je dizajniran tako da bude što sličniji formatu
				HDLC okvira. Njegova struktura je sledeća
			+ 1 bajt 01111110
			+ 1 bajt za adresu
			+ 1 kontrolni bajt 
				Default je 00000011, ovo odgovara nenumerisanom okviru
				odnosno, PPP ne omogućava pouzdan prenos pomoću rednih
				brojeva, jer najčešće nije ni potreban. Ova opcija se
				može uključiti u slučaju mreža sa puno grešaka, npr. bežičnih
			+ 1/2 bajta Protokol
			+ 0 ili više Payload
			+ 2 ili 4 bajta suma provere
			+ 1 bajt 01111110
			Koristi se umetanje bajtova
			Dijagram stanja:
				Dead - Establish - Authenticate - Network - (NCP conf) -
				Open - Terminate - Dead
		</laza>
	</pitanje>

	<pitanje id='38'>
		<naslov>
			Podsloj za upravljanje pristupom medijumima
		</naslov>
		<prez>
			08/2:3
		</prez>
		<book>
			181
		</book>
		<laza>
			Mreže se mogu podeliti na:
			+ Od tačke dod tačke
			+ Sa neusmerenim emitovanjem
				Ovde je problem odrediti ko će koristiti kanal
			Kanali za neusmereno emitovanje nazivaju se kanali za
				višekorisnički pristup (multiaccess channels) ili kanali
				za slučajan pristup (random access channels)
			Protokoli kojima se određuje sledeći korisnik kanala pripadaju
				podsloju sloja veze za upravljanje pristupom medijumima
				(Medium Access Control)
			Ovaj podsloj je posebno važan za LAN a koristi se i u mobilnoj
				telefoniji
			U regionalnim mrežama koriste se veze od tačke do tačke
		</laza>
	</pitanje>

	<pitanje id='39'>
		<naslov>
			Statičko dodeljivanje kanala
		</naslov>
		<prez>
			08/4:7
		</prez>
		<book>
			181:182
		</book>
		<laza>
			Klasičan način dodeljivanja jedinstvenog kanala je
				multipleksiranje podelom frekvencija
			Kada je broj pošiljalaca veliki i stalno se menja ova
				tehnika ne zadovoljava
			Neka je kanal brzine C b/s, brzina pristizanja je L okvira
				u sekundi a dužine okvira slede eksponencijalnu funkciju
				gustine verovatnoće sa srednjom vrednošću 1/m bitova
				po okviru
			Brzina opsluživanja je mC okvira u sekundi
			Može se pokazati da za pristizanje i opsluživanje okvira po
				Poissonovom zakonu važi 1/(mC - L)
			Ako se kanal podeli na N nezavisnih podkanala kašnjenje je N
				puta veće
			Sve što važi za FDM važi i za multipleksiranje podelom vremena
		</laza>
	</pitanje>

	<pitanje id='40'>
		<naslov>
			Dinamičko dodeljivanje kanala
		</naslov>
		<prez>
			08/8:12
		</prez>
		<book>
			182:183
		</book>
		<laza>
			Prvo ćemo formulisati problem, iz sledeće pretpostavke:
			+ 1) Model stanica: N nezavisnih stanica (terminala), gde je
				verovatnoća generisanja okvira u vremenu dt jednaka L dt,
				a stanica koja generiše okvir se blokira dok ga ne pošalje
			+ 2) Pretpostavka o jedinstvenom kanalu - sve stanice koriste
				jedan kanal sa mogućom dodelom prioriteta. Ovo znači i da
				ne postoji drugo sredstvo komunikacije
			+ 3) Pretpostavka o sukobljavanju: Stanice moraju da otkriju
				sukobljavanje (dva okvira se istovremeno emituju). Postoji
				i primer token ringa gde stanice prosleđuju token koji daje
				pravo na emitovanje
			+ 4) Vremenski tok
				a) Neprekidan, paket se može poslati bilo kad, nema sata
				b) Vreme je podeljeno na intervale, slanje se podudara sa
					početkom intervala a u intervalu može biti 0, 1 ili
					više paketa. U poslednjem slučaju dolazi do kolizije
			+ 5) Osluškivanje
				a) Pre upotrebe kanala stanica utvrđuje da li je on slobodan
					Ovo se uglavnom koristi u wired LAN
				b) Stanica ne proverava da li je kanal slobodan, već naknadno
					utvrđuje da li je paket uspešno poslat
			Neki od metoda su "čista" ALOHA i ALOHA sa podelom na diskretne
				intervale
		</laza>
	</pitanje>

	<pitanje id='41'>
		<naslov>
			Projektovanje mrežnog sloja i komutiranje paketa
		</naslov>
		<prez>
			09/02:03
		</prez>
		<book>
			256:257
		</book>
		<laza>
			Zadatak mrežnog sloja je da sprovede pakete od izvora do odredišta
				, moguće preko niza usmerivača
			Pri tome, mrežni sloj mora da:
			+ Poznaje topologiju mreže i da bira odgovarajuće putanje
			+ Da vodi računa o ravnomernom opterećenju usmerivača
			+ Da rešava probleme u komunikaciji između računara u različitim
				mrežama
			Grafik koji prikazuje komunikaciju između dva procesa preko
				podmreže, paket komutira
		</laza>
	</pitanje>

	<pitanje id='42'>
		<naslov>
			Usluge koje mrežni sloj obezbeđuje transportnom sloju
		</naslov>
		<prez>
			09/4:5
		</prez>
		<book>
			257
		</book>
		<laza>
			Pretpostavke:
			+ Usluge treba da su nezavisne od tehnogolije usmerivača
			+ Transportni sloj ne sme da zna ništa o broju, vrstama i
				topologiji usmerivača
			+ Mrežne adrese koje se dostavljaju transportnom sloju su
				uniformno označene (i u LAN i u WAN)
			Nameće se pitanje, da li mrežni sloj treba da obezbeđuje
				usluge sa ili bez uspostavljanja veze? Postoje dve škole:
			+ Internet zajednica kaže da zadatak rutera treba da bude samo
				da prosleđuje pakete i ništa drugo. Oni smatraju da je
				podmreža nepouzdana i da hostovi sami treba da vrše
				kontrolu grešaka i kontrolu toka
			+ Telefonske kompanije smatraju da bi podmreža trebalo da
				obezbedi pouzdanu uslugu zasnovanu na vezi. Tvrde da je
				kvalitet usluge veoma teško postići bez direktnog
				uspostavljanja veze
		</laza>
	</pitanje>

	<pitanje id='43'>
		<naslov>
			Realizacija usluge mrežnog sloja bez uspostavljanja direktne veze
		</naslov>
		<prez>
			09/6, 09/8
		</prez>
		<book>
			257:258
		</book>
		<laza>
			Paketi se pojedinačno ubacuju u mrežu i nezavisno usmeravaju
			Paketi se zovu datagrami po analogiji sa telegramima a podmreža
				se naziva datagramska
			IP protokol - svaki paket sadrži adresu odredišta
			Ruteri mogu imati tabele usmeravanja - za svaku destinaciju znaju
				na koju izlaznu liniju da pošalju paket. Algoritam koji
				vodi računa o ovim tabelama se naziva algoritam za usmeravanje
		</laza>
	</pitanje>

	<pitanje id='44'>
		<naslov>
			Realizacija usluge mrežnog sloja sa uspostavljanjem direktne veze
		</naslov>
		<prez>
			09/7, 09/9:10
		</prez>
		<book>
			259
		</book>
		<laza>
			Telefonija je motivacija
			Pre slanja paketa sa podacima mora da se uspostavi putanja od
				izvornog do odredišnog usmerivača
			Takva veza se naziva virtuelno kolo, a podmreža se naziva podmreža
				sa virtuelnim kolima
			Kada se veza uspostavi, putanja od izvora do odredišta postaje
				njen parametar koji se upisuje u tabele usmerivača
			Svaki paket nosi identifikator virtuelnog kola kome pripada
			Dijagram koji prikazuje tabelu sa rutiranjem i virtuelnim kolima
			Ovaj VC identifikator ne mora da bude isti u svakom ruteru
		</laza>
	</pitanje>

	<pitanje id='45'>
		<naslov>
			Poređenje podmreža sa virtuelnim kolima i datagramskih podmreža
		</naslov>
		<prez>
			09/11:13
		</prez>
		<book>
			259:261
		</book>
		<laza>
			DGM - Datagramska podmreža
			VCM - Podmreža sa virtuelnim kolima
			1) Uspostava kola - kod DGM nije potrebna, kod VCM je neophodna
			2) Adresiranje - kod DGM svaki paket sadrži adresu izvora i
				odredišta, kod VCM sadrži samo broj virtuelnog kola.
			3) Informacije o stanju - kod DGM ruteri ne održavaju informacije
				o stanju veze (jer i nema veze), dok kod VCM svaka veza
				zauzima jedan red u tabeli
			4) Rutiranje - kod DGM svaki paket se nezavisno rutira, kod VCM
				ruta se bira pri uspostavi VC, nakon toga je svi paketi
				samo prate
			5) Efekat prekida rada rutera - kod DGM gube se samo paketi koji
				su bili u memoriji rutera u trenutku njegovog pada, dok kod
				VCM se sva virtuelna kola prekidaju
			6) Kvalitet usluge i kontrola zagušenja - teško uspostaviti kod DGM,
				kod VCM lako ako je moguće alocirati dovoljno resursa unapred
				za svako virtuelno kolo

			1 - Kod VC potrebno je izvesno vreme za uspostavu veze ali se nakon
				toga paketi lako usmeravaju. Kod nekih aplikacija ova zadrška
				je neprihvatljiva
			2 - adrese zauzimaju značajan deo prostora kod DGM dok kod VCM
				velika količina memorije rutera se troši na održavanje tabele

			U DGM tabela rutera ima odrednicu za svako moguće odredište, ali se
				i kod VC koriste paketi za uspostavljanje veze sa potpunim
				adresama
		</laza>
	</pitanje>

	<pitanje id='46'>
		<naslov>
			Algoritmi za usmeravanje
		</naslov>
		<prez>
			09/14:19
		</prez>
		<book>
			261:262
		</book>
		<laza>
			Zadatak mrežnog sloja je da pakete usmeri sa izvornog na odredišni
				računar
			Paketi taj put prelaze u više skokova
			Algoritam za usmeravanja je deo softvera mrežnog sloja koji
				odlučuje na koju liniju treba uputiti pristigli paket
			U datagramskoj podmreži odluka se donosi za svaki paket ponaosob
			U podmreži sa virtuelnim kolima odluka se donosi samo kod
				uspostavljanja virtuelnog kola
			Vredno je pomenuti razliku između usmeravanja (routing) i
				prosleđivanja (forwarding)
			+ Prosleđivanje se sastoji od prihvatanja paketa i pronalaženja
				odgovarajuće izlazne linije u tabelama
			+ Usmeravanje se bavi popunjavanjem i ažuriranjem tabela za
				usmeravanje

			Dobar algoritam za usmeravanje treba da ima sledeće osobine:
			+ Tačnost
			+ Jednostavnost
			+ Robusnost - u hodu se rešavaju promene u topologiji mreže
				i saobraćaja u njoj
			+ Stabilnost - neki algoritmi nikada ne dostižu ravnotežu
			+ Pravičnost
			+ Optimalnost

			Pravičnost i optimalnost su često u konfliktu, dijagram sa
				primerom
			Za kompromisno rešenje treba utvrditi šta se optimizuje:
			+ Srednje kašnjenje paketa
			+ Ukupan protok kroz mrežu
			Kako su ova dva zahteva takođe u sukobu negde se, kao kompromis,
				minimizira broj skokova paketa

			Algoritmi za usmeravanje mogu biti neadaptivni (statičke rute),
				i adaptivni, koji se pak razlikuju na osnovu porekla
				informacija (okolni usmerivači ili svi usmerivači na mreži),
				učestanosti promene putanje i metrici koja se koristi
				za optimizaciju
		</laza>
	</pitanje>

	<pitanje id='47'>
		<naslov>
			Princip optimalnosti
		</naslov>
		<prez>
			09/20:22
		</prez>
		<book>
			262:263
		</book>
		<laza>
			Princip optimalnosti glasi:
			Ako se usmerivač B nalazi na optimalnoj putanji između
				usmerivača A i C, tada se optimalna putanja između
				B i C nalazi na istoj toj putanji
			Dokaz kontradokcijom
			Odavde sledi da skup svih putanja od svih izvora ka jednom
				odredištu obrazuje stablo sa korenom na odredištu. Ovo
				stablo nazivamo stablo optimalnih putanja
			Ovo stablo ne mora biti jedinstveno
			Osnovni zadataka algoritama za usmeravanje je da otkriju
				i primenjuju ova stabla.
			Napomena - ako stablo nije jedinstveno i dozvolimo da se koriste
				sve putanje, onda imamo DAG
		</laza>
	</pitanje>

	<pitanje id='48'>
		<naslov>
			Usmeravanje najkraćom putanjom
		</naslov>
		<prez>
			09/23:28
		</prez>
		<book>
			263:266
		</book>
		<laza>
			Koristi Dijkstrin algoritam za nalaženje najkraćeg puta od
				jednog čvora do svih ostalih čvorova u grafu, kada taj
				graf ne sadrži ivice negativne težine 1959
			Pre svega se mora napraviti graf podmreže i mora se odrediti
				metrika za težine ivica
			Opis algoritma, prikaz rada algoritma i njegova implementacija
				(spora, O(n^2))
		</laza>
	</pitanje>

	<pitanje id='49'>
		<naslov>
			Plavljenje
		</naslov>
		<prez>
			09/29:30
		</prez>
		<book>
			266:267
		</book>
		<laza>
			Svaki dolazni paket šalje se na sve izlazne linije osim na onu
				sa koje je došao
			Veliki broj duplikata može da se priguši na više načina:
			+ Uvođenjem brojača skokova (koji se inicijalizuje na prečnik
				podmreže ili na rastojanje između izvora i odredišta)
			+ Uvođenjem rednih brojeva, gde usmerivač održava listu za
				svaki od izvornih usmerivača odbacujući pakete sa brojem
				koji je već u tabeli. I ove liste mogu da neograničeno
				rastu pa se uvodi brojač čija vrednost znači da su već
				prošli paketi sa brojem manjim od vrednosti brojača
			+ Selektivno plavljenje, gde se paketi usmeravaju samo na one
				linije koje su približno u ispravnom smeru
			Plavljenje ima svoje primene
			+ U vojsci, gde je izuzetna robusnost plavljenja korisna kada
				u bilo kom trenutku bilo koji ruter može biti uništen
			+ Kod distribuiranih baza podataka, gde treba konkurentno
				apdejtovati veliki broj baza
			+ Kod raćunanja metrika mreže za potrebe drugih algoritama, jer
				plavljenje po svojoj prirodi nalazi najkraći put do
				odredišta
			Dijkstrin algoritam je efektivno simulacija plavljenja
		</laza>
	</pitanje>

	<pitanje id='50'>
		<naslov>
			Usmeravanje zasnovano na vektoru razdaljine
		</naslov>
		<prez>
			09/31:33
		</prez>
		<book>
			267:268
		</book>
		<laza>
			Plavljenje i usmeravanje najkraćim putem su statičke metode,
				ova je dinamička
			Zasniva se na održavanju i razmeni vektora razdaljine. VR rutera
				X sadrži rastojanje od usmerivača X do svakog drugog, i
				izlaznu liniju preko koje je dobijena ta razdaljina.
			Naziva se još i Belman-Fordov i Ford-Fulkersonov algoritam
			Ponovo metrika može biti broj skokova, kašnjenje ili broj paketa
				u redu čekanja na putanji
			Periodično, svaki usmerivač šalje svojim susedima listu
				procenjenih kašnjenja do njih
			Kada ruter primi tabelu od svakog suseda on iznova računa svoju
				tabelu
			Stara tabela se ne koristi za računanje jer nije više ažurna

		</laza>
	</pitanje>

	<pitanje id='51'>
		<naslov>
			Problem približavanja beskonačnosti
		</naslov>
		<prez>
			09/34:35
		</prez>
		<book>
			268:269
		</book>
		<laza>
			Algoritam zasnovan na vektoru razdaljine u praksi ima ozbiljan
				nedostatak: Brzo reaguje na dobre vesti ali zato vrlo
				sporo reaguje na loše (povećanje kašnjenja na nekoj liniji
				ili prekid neke linije ili pad rutera)
			Kada X saopšti Y da ima putanju do Z, Y ne zna da li se on nalazi
				na njoj, što može biti uzrok problema
			Primer sa linearnom mrežom
			Rezime: kada se desi loša promena na mreži, podaci u vektorima
				razdaljine u ruterima prestaju da budu validni, što ruteri
				ne mogu da znaju, a te nevalidne informacije se prosleđuju
				po mreži
		</laza>
	</pitanje>

	<pitanje id='52'>
		<naslov>
			Usmeravanje zasnovano na stanju veze:
				zadaci i upoznavanje suseda
		</naslov>
		<prez>
			09/36:39
		</prez>
		<book>
			269:270
		</book>
		<laza>
			Link state routing - LSR
			Vektori razdaljine su se koristili u ARPANET do 1979
			Prešlo se na LSR iz sledećih razloga
			+ Za merenje rastojanja je korišćena dužina reda čekanja, što
				je sa pojavom linija bržih od 56kbps postao problem. Naime,
				algoritam nije uzimao u obzir brzinu linije
			+ Algoritam je sporo dostizao ravnotežu (problem približavanja
				beskonačnosti)
			Logika LSR je jednostavna i nalaže usmerivaču da:
			+ otkrije svoje susede i sazna njihove mrežne adrese
			+ izmeri vremensko rastojanje ili troškove slanja do svakog
				svog suseda
			+ napravi paket sa svim podacima koje do toga trenutka ima
			+ pošalje taj paket svim usmerivačima
			+ izračuna najkraću putanju do svakog usmerivača
			Radi upoznavanja suseda na svaku liniju se šalje pozdravni paket
				HELLO, usmerivači koji dobiju taj paket se predstavljaju,
				njihova imena moraju biti globalno jedinstvena
			Ako je više usmerivača povezano LANom, onda lokalnu mrežu
				možemo predstaviti jednim čvorom
		</laza>
	</pitanje>

	<pitanje id='53'>
		<naslov>
			Usmeravanje zasnovano na stanju veze:
				merenje troškova slanja linijom
		</naslov>
		<prez>
			09/40:42
		</prez>
		<book>
			270:271
		</book>
		<laza>
			Za merenje troškova slanja šalje se paket ECHO koji primalac mora
				da vrati
			Nameće se pitanje da li pri merenju putanje treba uzimati u obzir
				opterećenje.
			+ Ako se uzima u obzir, tajmer za merenje vremena obilaska se
				aktivira kada se ECHO paket smesti u red čekanja
			+ U suprotnom, uzima se tek kad izbije na čelo reda
			U prvom slučaju se neopterećena linija smatra boljom putanjom
			Postoje i argumenti protiv, naime, ako stalno prebacujemo saobraćaj
				na slobodne linije, nećemo dostići ravnotežu već ćemo
				oscilovati između
			Jedno rešenje je da se saobraćaj distribuira na nekoliko linija
				kada je to moguće
		</laza>
	</pitanje>

	<pitanje id='54'>
		<naslov>
			Usmeravanje zasnovano na stanju veze:
				pravljenje paketa sa stanjem veze
		</naslov>
		<prez>
			09/43:45
		</prez>
		<book>
			271:272
		</book>
		<laza>
			Svaki usmerivač pravi paket sa stanjem veze pošto je prikupio
				odgovaraćuje podatke:
			+ Identifikaciju pošiljaoca
			+ Redni broj paketa
			+ Starost paketa
			+ Listu suseda i kašnjenje do njih
			Nameće se pitanje kada treba praviti paket sa stanjem veze:
			+ Periodično
			+ Posle nekih događaja, kao što je otkaz ili oporavak neke linije
				ili usmerivača ili promena nekog svojstva npr. opterećenja
		</laza>
	</pitanje>

	<pitanje id='55'>
		<naslov>
			Usmeravanje zasnovano na stanju veze:
				distribuiranje paketa sa stanjem veze
		</naslov>
		<prez>
			09/46:50
		</prez>
		<book>
			272:273
		</book>
		<laza>
			Najkritičniji deo algoritma je pouzdano distribuiranje paketa
				sa stanjem veze. Prema osnovnoj zamisli, ovi paketi se
				distribuiraju plavljenjem. Svaki paket sadrži redni broj
				koji se uvećava za svaki naredni paket. Problem nastaje
				ako se redni brojevi ciklično ponavljaju. Rešenje je u
				korišćenju velikih tj. 32-bitnih rednih brojeva, uz jedan
				paket u sekundi ponavljanje bi se desilo nakon 137 godina
			Problemi:
			+ Kada usmerivač otkaže gubi evidenciju rednih brojeva
			+ Ako se redni broj ošteti, veliki broj paketa se odbacuje kao
				zastareo bez potrebe
			Rešenje: uz redni broj se uključi i starost paketa - brojač
				koji se svake sekunde smanjuje za jedan
			Robusnost algoritma se povećava sledećim tehnikama:
			+ Kada paket stigne on se najpre smešta u "čekaonicu" pre nego
				u red za slanje
			+ Ako drugi paket iz istog izvora stigne pre nego što se prvi
				pošalje porede se redni brojevi
			+ Ako se oni razlikuju odbacuje se stariji
			Zbog mogućih grešaka na linijama zahteva se potvrda za svaki
				paket sa stanjem veze
			Kada je linija prazna čekaonica se proverava da bi se odabrao
				paket ili potvrda za slanje
			Izgled strukture podataka za usmerivač B je:
			Prvi ACF su send flags, a drugi ACK flags
			Izvor, Seq, Age, A, C, F, A, C, F, Data
			A    , 21 , 60 , 0, 1, 1, 1, 0, 0,
			F    , 21 , 60 , 1, 1, 0, 0, 0, 1,
			E    , 21 , 59 , 0, 1, 0, 1, 0, 1
			...
			B je direktno povezan za A, C, F. Svaki od flagova govori
				da paket treba da se pošalje na tu liniju odnosno da li
				treba da se potvrdi na tu liniju
		</laza>
	</pitanje>

	<pitanje id='56'>
		<naslov>
			Usmeravanje zasnovano na stanju veze:
				izračunavanje novih putanja
		</naslov>
		<prez>
			09/51
		</prez>
		<book>
			273:274
		</book>
		<laza>
			Kada usmerivač prikupi sve pakete sa stanjem veze može da se
				konstruiše graf podmreže
			Može se upotrebiti Dijkstrin algoritam za konstruisanje najkraćih
				putanja. Kako svaku ivicu grafa imamo u oba smera, možemo
				raditi sa tim ivicama odvojeno ili izračunati prosek
				i smatrati ih za jednu
			Rezultati se upisuju u tabele i nastavlja se sa radom
			Problemi:
				Velika memorija za tabele u velikim podmrežama
				Trajanje izračunavanja
				Problemi u hardveru i softveru prave haos
			OSPF protokol koji se koristi na Internetu koristi Link State
				algoritam
		</laza>
	</pitanje>

	<pitanje id='57'>
		<naslov>
			Hijerarhijsko usmeravanje
		</naslov>
		<prez>
			09/52:54
		</prez>
		<book>
			274:275
		</book>
		<laza>
			Kako mreža raste rastu i tabele u usmerivačima
			Stoga se usmeravanje vrši hijerarhijski - usmerivači se dele
				u oblasti, u dva ili više nivoa
			Za ogromne mreže, dva nivoa najčešće nisu dovoljna.
			Optimalan broj nivoa u hijerarhiji za N usmerivača je ln N,
				pri čemu tabele usmerivača sadrže e ln N odrednica.
				Ovo se odnosi na minimizaciju utrošene memorije
		</laza>
	</pitanje>

	<pitanje id='58'>
		<naslov>
			Realizovanje neusmerenog emitovanja
		</naslov>
		<prez>
			09/55:57
		</prez>
		<book>
			275:277
		</book>
		<laza>
			Drugo ime: Broadcast Routing
			Ponekad je potrebno poslati poruke mnogim drugim računarima
			Prvi metod je slanje paketa na svako odredište. Ovaj način nije
				dobar jer se opterećuje propusni opseg i pošiljalac mora
				da zna adrese svih odredišta
			Drugi metod je plavljenje. Međutim, kod neusmerenog emitovanja
				javljaju se isti problemi kao kod korišćenja plavljenja za
				usmereno emitovanje - generiše se previše paketa i troši
				se previše propusnog opsega
			Treći način je usmeravanje na više odredišta, gde svaki paket
				sadrži listu odredišta ili bitmapu koja određuje destinacije.
				Kada paket stigne, pravi se po jedna njegova kopija za svaku
				izlaznu liniju, a svaka kopija sadrži samo one destinacije
				do koji se može najbrže doći preko baš te linije. Na neke
				linije možda neće ni biti poslat paket
			Četvrti je da se koristi samo stablo optimalnih putanja, ili
				neko drugo pokrivajuće stablo. Ovaj metod je jako dobar jer
				troši minimalnu količinu propusnog opsega i broj paketa ali
				zahteva da usmerivač poznaje neko pokrivajuće stablo. Ova
				informacija je dostupna ako se koristi link state routing
				ali nije ako se koristi npr. usmeravanje vektorom udaljenosti
			Peti metod je prosleđivanje paketa ispitivanjem izvora. Ova metoda
				radi tako što ruter ispituje da li je paket stigao od izvora
				onom linijom kojom bi inače bio poslat kad bi bio odredište.
				Ako jeste, onda se verovatno radi o prvoj kopiji koja je
				pronašla najbolju putanju i prosleđuje se dalje na sve
				ostale linije, u suprotnom se odbacuje. 
		</laza>
	</pitanje>

	<pitanje id='59'>
		<naslov>
			Višesmerno usmeravanje
		</naslov>
		<prez>
			09/58:63
		</prez>
		<book>
			277:278
		</book>
		<laza>
			Drugo ime: Multicast Routing
			Nekada je pri realizovanju distribuirane baze podataka potreban
				zajednički radi više udaljenih procesa, pa je neophodno da
				proces pošalje istu poruku većem broju drugih procesa
			Slanje poruka se zove višesmerno emitovanje a algoritam se zove
				algoritam za višesmerno usmeravanje
			Pojam grupe. Grupa može biti destinacija kod ovog vida emitovanja
			Treba da postoji mehanizam za kreiranje i raspuštanje grupa,
				smeštanje procesa u grupe i uklanjanje iz njih.
			Da bi mogao da šalje pakete u više smerova, svaki usmerivač
				konstruiše pokrivajuće stablo koje obuhvata sve druge
				usmerivače.
			Neki računari se mogu nalaziti u više grupa
			Kada proces pošalje višesmerni paket svim članovima grupe, prvi
				usmerivač ispituje svoje pokrivajuće stablo i sa njega okreše
				sve grane koje ne vode ka nekom članu grupe.
			Ovo tzv. proređivanje stabla se može uraditi na više načina:
			+ Ako se usmeravanja vrši na osnovu stanja veze, usmerivač poznaje
				topologiju, pa napredujući po razgranatom stablu eliminiše
				usmerivače koji ne spadaju u pojedinu grupu
			+ Ako se usmeravanje vrši na osnovu vektora razdaljine, usmerivač
				koji nema računare iz dotične grupe na primljenu poruku
				odgovara sa PRUNE što znači da nije zainteresovan za dalji
				prijem - rekurzivni pristup, usmerivač treba da odgovori sa
				PRUNE svom prethodniku ako su svi njegovi sledbenici odgovorili
				sa PRUNE
			Nedostatak je velika količina memorije potrebna za pamćenje ovih
				stabala
			Alternativa je stablo zasnovano na jezgru.
			Za svaku grupu se bira jedan predstavnik (ruter) koji je približno
				u sredini stabla i samo on pamti stablo za tu grupu. Sve
				poruke za tu grupu se prvo šalju predstavniku a on ih dalje
				prosleđuje. Iako ovo stablo neće biti optimalno za sve
				izvore, memorijska ušteda je značajna
		</laza>
	</pitanje>

	<pitanje id='60'>
		<naslov>
			Usluga prenosa koju transportni sloj obezebeđuje za više slojeve
		</naslov>
		<prez>
			10/2:7
		</prez>
		<book>
			364:365
		</book>
		<laza>
			Kao srž hijerarhije slojeva ima zadatak da obezbedi pouzdan
				i isplativ prenos podataka, bez obzira na fiziču mrežu koja
				se nalazi između izvora i odredišta
			Posao ovog sloja odvija se u pružanju usluga procesima u sloju
				aplikacija
			Koristi usluge nižeg, mrežnog sloja
			Hardver i softver unutar transportnog sloja koji obavlja prenos
				naziva se transportna jedinica
			Transportna jedinica se može naći u kernelu, posebnom procesu,
				biblioteci u mrežnoj aplikaciji ili na mrežnoj kartici
			Dijagram koji opisuje vezu između slojeva aplikacija, transportnog
				i mrežnog sloja
			Postoje dve vrste usluge prenosa:
			+ Sa uspostavljanjem direktne veze
				Liči na odgovarajuću uslugu mrežnog sloja
				Postoje tri faze:
				+ uspostavljanje veze
				+ prenos podataka
				+ raskidanje veze
			+ Bez uspostavljanja direktne veze, koja takođe liči na
				odgovarajuću uslugu mrežnog sloja
			Slični su načini adresiranja i kontrola toka
			Razlog zašto postoje posebni slojevi jeste što se code transportnog
				sloja izvršava samo na korisničkim računarima (hostovima) a
				code mrežnog sloja pretežno na usmerivačima
			Takođe, ovaj sloj omogućuje pouzdaniju uslugu od usluge mrežnog
				sloja i sakriva detalje mrežnog sloja od korisničkih
				aplikacija, odnosno pruža jednostavniji interfejs sloju
				aplikacija
		</laza>
	</pitanje>

	<pitanje id='61'>
		<naslov>
			Osnovne operacije u uslugama prenosa
		</naslov>
		<prez>
			10/8:14
		</prez>
		<book>
			365:368
		</book>
		<laza>
			Transportni sloj obezbeđuje aplikacijama osnovne operacije
				odnosno interfejs ka uslugama prenosa
			Usluga prenosa slična je usluzi mrežnog sloja sa bitnom razlikom
				što je usluga mrežnog sloja nepouzdana
			Usluga prenosa sa uspostavljanjem direktne veze je u potpunosti
				pouzdana
			Druga razlika je u korisnicima usluga. Mrežna usluga je namenjena
				samo transportnim jedinicama. Retki su korisnici koji pišu
				svoje transportne jedinice. Sa druge strane, mnogi programi,
				samim tim i programeri, vide transportne primitive. Ovo za
				posledicu ima da transportna jedinica mora da bude jednostavna
				za korišćenje
			Postoje sledeće operacije (primitive):
			LISTEN - ne šalju se paketi, proces se blokira dok ne dođe zahtev
				za vezom
			CONNECT - šalje se CONN. REQ. paket, aktivno se pokušava konekcija
			SEND - šalju paketi sa podacima
			RECEIVE - ne šalju se paketi - proces se blokira se dok ne stigne
				paket sa podacima
			DISCONNECT - šalje se paket DISCONN. REQ. - ova strana želi da
				prekine vezu
			Poruke koje se razmenjuju na ovom sloju nazivaju se jedinice
				podataka transportnog sloja iliti TPDU
			U paketima koje razmenjuje mrežni sloj nalaze se TPDU poruke
			Najzad, paketi se nalaze u okvirima koje razmenjuje sloj veze
				podataka
			Primer aplikacije sa serverom, sa redosledom izvršenih operacija
				od navedenih 5
			Dijagram stanja transportne jedinice
		</laza>
	</pitanje>

	<pitanje id='62'>
		<naslov>
			Berkli utičnice
		</naslov>
		<prez>
			10/15:18
		</prez>
		<book>
			368:369
		</book>
		<laza>
			Berkli utičnice su druga vrsta osnovnih operacija. Ima ih osam:
			+ SOCKET - kreira novu utičnicu i za nju obezbeđuje prostor u
				tabeli u transportnoj jedinici
			+ BIND - dodeljuje lokalnu adresu utičnici
			+ LISTEN - Objavi da želiš da prihvatiš veze, napravi red
				za dolazne pozive. Ova operacija ne blokira
			+ ACCEPT - Blokira pozivaoca dok ne dođe do pokušaja uspostave
				veze
			+ CONNECT - Aktivno pokušavaj da uspostaviš vezu. Blokira se
				dok od servera ne dobije potvrdu o uspostavi veze
			+ SEND - Pošalji podatke preko veze
			+ RECEIVE - Primi podatke preko veze
			+ CLOSE - Simetrično zatvori vezu
		</laza>
	</pitanje>

	<pitanje id='63'>
		<naslov>
			Sličnosti i razlike u radu mrežnih i transportnih protokola
		</naslov>
		<prez>
			10/19:22
		</prez>
		<book>
			373:374
		</book>
		<laza>
			Usluga prenosa se ostvaruje preko transportnog protokola
			Transportni protokoli podsečaju na protokole sloja veze:
			+ I jedni i drugi sprovode kontrolu grešaka
			+ Šalju podatke određenim redosledom
			+ Obavljaju kontrolu toka
			Razlike:
			+ U DLL usmerivači komuniciraju direktno preko fizičkog kanala,
				dok je u transportnom sloju to čitava podmreža
			Posledice:
			+ U transportnom sloju mora da se naznači adresa primaoca
			+ Uspostava veze preko žice je jednostavnija jer je odredište
				uvek, prosto, na drugom kraju. Kod TL potrebno je više
				pripreme
			+ Podmreža ima kapacitet privremenog skladištenja paketa
				Ovo znači da treba predvideti mogućnost da paketi stignu
				u pogrešnom redosledu, da se izgube ili čak dupliraju
				što može imati katastrofalne posledice
			+ Poslednja razlika je kvantitativne prirode - transportni
				sloj mora da bude u stanju da paralelno održava veliki broj
				veza, pa zato nije poželjno praviti bafer podataka za svaku
				od njih
		</laza>
	</pitanje>

	<pitanje id='64'>
		<naslov>
			Adresiranje kod transportnih protokola
		</naslov>
		<prez>
			10/23:33
		</prez>
		<book>
			374:376
		</book>
		<laza>
			Kada aplikacija želi da uspostavi vezu sa procesom udaljene
				aplikacije, mora da je eksplicitno navede
			Uobičajeno je da se navede adresa procesa koji treba da osluškuje
				zahteve za uspostavljanjem veze
			Takve krajnje tačke na Internetu se nazivaju portovima, dok je
				uopšteni naziv (nevezan za stek protokola ili mrežu) TSAP,
				Transport Service Access Point
			Odgovarajuće krajnje tačke u mrežnom sloju nazivaju se NSAP
			Dijagram povezivanja
			Na Hostu 1 aplikacioni proces koji se povezao za TSAP 1208 želi
				da uspostavi vezu sa procesom na Hostu 2 koji sluša na TSAP
				1522, koji služi kao server tekućeg vremena.
			Opis procesa povezivanja u ovom primeru, u 5 koraka
			Kako korisnički proces zna da je server za tekuće vreme baš na
				TSAP 1522
			+ Jedna mogućnost je da je to praksa u dužem vremenskom periodu
				tj. neka vrsta standarda
			+ Druga je protokol za početno povezivanje
				Svaki računar ima Server Procesa koji zastupa sisteme koji
					se retko koriste
			On istovremeno osluškuje više priključaka
			Korisnik usluge šalje CONNECT na TSAP adresu usluge koju
				želi. Ako nijedan server ne odgovori na zahtev, veza se
				uspostavlja sa serverom procesa, koji kad primi zahtev,
				kreira server za odgovarajuću uslugu i omogućuje tom serveru
				da preuzme konekciju
			Server procesa se vraća na osluškivanje novih zahteva
			U nekim situacijama nije moguće praviti server po potrebi, rešenje
				je u kreiranju specijalnog procesa - servera imena tj.
				server direktorijuma. I u ovom slučaju je neophodno znati
				TSAP ovog servera - analogija sa 988 telefonskim servisom
		</laza>
	</pitanje>

	<pitanje id='65'>
		<naslov>
			Uspostavljanje veze kod transportnih protokola
		</naslov>
		<prez>
			10/34:48
		</prez>
		<book>
			376:380
		</book>
		<laza>
			Vrlo složen problem iako se čini da je dovoljno da jedna jedinica
				pošalje TPDU poruku CONNECTION REQUEST i da čeka CONNECTION
				ACCEPTED.
			Razlozi za nastana problema:
			+ Paket se izgubi
			+ Paket se uskladišti
			+ Paket se duplira
			Primer sa bankom
			U osnovi problema su zakasneli duplikati
			Jedna strategija je da se koriste jednokratne transportne adrese,
				međutim tada ne možemo da koristimo server procesa
			Druga strategija je da se svakoj vezi pridruži redni broj, loše
				jer je potrebno neograničeno održavati informacije o prethodnim
				vezama
			Prva stvar koju moramo da uradimo jeste da pronađemo način da
				sprečimo pakete da neograničeno dugo lutaju mrežom
			Ovo se može postići sledećim tehnikama ili njihovim kombinacijama:
			+ Odgovarajućim projektovanjem mreže
				Ovde podrazumevamo mrežu bez petlji u kojoj se kašnjenje
				prouzrokovano zagušenjem može izračunati kao vreme putovanja
				najdužom mogućom putanjom
			+ Smeštanjem brojača skokova u paket
				Postavimo početnu vrednost brojača, svakim prenosom se ovaj
				broj smanjuje za jedan. Odbacuju se paketi čiji je brojač
				pao na nulu
			+ Vremenskim označavanjem svakog paketa
				Svaki paket nosi vreme nastanka a usmerivači ih odbacuju
				nakon nekog perioda
			Osim paketa treba uništiti i njegove potvrde
			Uvedimo vreme T - mali umnožak životnog veka paketa. Nakon tog
				vremena možemo biti sigurni da su nestali svi tragovi
				paketa na mreži
			Sada možemo osmisliti tehniku za pouzdano uspostavljanje veze

			Sledeći metod je predložio Tomlinson, a doradili su ga Sanšajn i
				Delal. Njegove varijante se koriste u TCP protokolu
			U svaki računar je ugrađen sat tekućeg vremena i ti satovi treba
				da su sinhronizovani
			Satovi su binarni brojači koji se inkrementiraju u jednakim
				vremenskim intervalima
			Broj bitova u brojaču treba da je veći ili jednak broju bitova
				u rednim brojevima poruka
			Pretpostavlja se da sat nastavlja da radi i kada računar otkaže

			Suština Tomlinsonovog mehanizma je da obezbeđuje da se dve TPDU
				poruke sa istim rednim brojem nikada ne nađu istovremeno
				na mreži
			Kada se veza uspostavi, za početni redni broj koristi se k bitova
				najmanje težine sata
			Na taj način svaka veza započinje obeležavanjem svojih TPDU poruka
				različitim početnim rednim brojem

			Primer sa dijagramom i zabranjenom zonom

			Neka je T = 60s i neka sat otkucava jednom u sekundi i neka je
				u trenutku t = 30s jednom običnom TPDU paketu X poslatog
				vezom 5 dodeljen redni broj 80
			Čim je poslao paket X računar otkazuje ali se ubrzo oporavlja
			U trenutku t = 60s počinje da uspostavlja veze 0 do 4.
			U trenutku t = 70s ponovo uspostavlja vezu 5 koristeći redni broj
				70.
			U narednih 15s šalje TPDU pakete sa podacima sa rednim brojevima 70
				do 80 pa se u trenutku t = 85s na mreži pojavljuje novi
				paket sa rednim brojem 80 i vezom 5. Međutim, kako je prošlo
				samo 25 sekundi od nastanka paketa X, imamo problem.
			Da bi se izbeglo nastajanje ovakvih dupliranih paketa, neophodno
				je razgraničiti 2D prostor vreme/redni broj, tako da dva
				paketa iz dve različite konekcije sa istim rednim brojem ne
				mogu da postoje istovremeno na mreži, odnosno mora da važi da
				su poslati u razmaku od najmanje T sekundi.
			Ovo se radi uvođenjem zabranjenih zona - nedozvoljene kombinacije
				su (t=x, id=y) za y-x između 0 i T (slika)
			Ovaj protokol može doživeti probleme:
			+ Ako računar prevelikom brzinom šalje pakete pa brzina trošenja
				rednih brojeva prevazilazi brzinu potencijalnog dodeljivanja
				početnih rednih brojeva. U suštini, postojaće gornja granica
				za brzinu slanja
			+ Pri bilo kojoj manjoj brzini, nakon dovoljno vremena ući će se
				u zabranjenu zonu sa leve strane
			I upravljački paketi za uspostavljanje veze mogu da kasne pa može
				nastati problem sa usklađivanjem dve strane oko početnog
				rednog broja

			Tomlinsonovo trostepeno usaglašavanje (1975)

			Protokol ne zahteva da obe strane započnu emisiju sa istim rednim
				brojem, nije neophodno usaglašavanje prema globalnom vremenu
			Dijagram normalnog uspostavljanja veze
			U zagradama je (redni broj, broj potvrde)

			+ H1 šalje paket CR (x, ?)
			+ H2 odgovara sa ACK (y, x)
			+ H1 šalje podatke i (x, y)
			
			Šta ako se pojavi zakasneli duplikat prvog CR paketa?

			+ H2 odgovara sa ACK (y, x), tražeći potvrdu da je H1 zaista
				želeo da uspostavi tu vezu
			+ Kako H1 nije tražio ovu vezu, odgovara sa REJECT (?, y)

			Najgori slučaj je sledeći:

			Neka je H1 računar korisnika, H2 računar banke

			+ H1 šalje paket CR (x, ?)
			+ H2 šalje ACK (y, x)
			+ H1 šalje zahtev banci da proda $100000 akcija, DATA (x, y),
				server banke odobrava ovu transakciju
			+ U međuvremenu hostu H2 stiže duplikat prvog zahteva za
				konekcijom. Server ovog puta odgovara sa (z, x)
			+ U međuvremenu stiže duplikat prethodnog DATA zahteva da se
				proda $100000 akcija, isto sa DATA (x, y). Server odbija
				ovaj zahtev jer je pogrešan redni broj, treba da bude (x, z)
			+ Tek sada H1 dobija odgovor ACK (z, x). Kako on nije tražio
				ovu vezu, odbiće je tj. poslaće REJECT (x, z)
		</laza>
	</pitanje>

	<pitanje id='66'>
		<naslov>
			Raskidanje veze kod transportnih protokola
		</naslov>
		<prez>
			10/49:55
		</prez>
		<book>
			380:384
		</book>
		<laza>
			Složen problem
			Raskidanje veze može biti
			+ Simetrično - veza se tretira kao dvosmerna. Raskidanje jedne
				strane ne raskida drugu. Radi dobro kada svaki od procesa
				šalje fiksnu količinu podataka i tačno zna kada ih je sve
				poslao
			+ Asimetrično - jedna strana može da prekine oba smera. Ovo
				prekidanje je naglo i može da izazove gubitak podataka
			+ Možemo da zamislimo da H1 raskida vezu i ako računar 2 isto
				to uradi veza je raskinuta
			+ Nažalost to ne radi uvek - problem dve vojske
				Objašnjenje problema i argument zašto nema rešenja
			U praksi, rizik raskidanja veze bez da je druga strana saglasna
				nije tako veliki kao u problemu dve vojske

			Prvi način za raskid veze jeste ako H1 želi da raskine. On pošalje
				DR računaru H2 i počinje svoj tajmer, H2 uspešno primi
				paket, započinje svoj tajmer i šalje DR računaru H1.
				Kada H1 primi ovaj paket, onda on oslobađa vezu i šalje ACK
				drugom računaru, koji po primanju ACK oslobađa vezu.

			Drugi način na koji se veza može raskinuti jeste ako u prethodnom
				scenariju ACK ne stigne do H2. H1 je već oslobodio vezu a H2
				će to učiniti po isteku tajmera.

			Treći scenario je ako se zagubi prvi odgovor računara H2. Po isteku
				timeouta u H1, H1 će ponovo započeti tajmer i pokušati ponovo
				da oslobodi vezu, i ovog puta će uspeti.

			Četvrti scenario jeste ako H1 pokuša N puta da oslobodi vezu a
				da mu u međuvremenu ne stigne nijedan odgovor od H2. U tom
				slučaju H1 zatvara vezu. Ako je neki od DRova stigao
				do H2, on će tada započeti tajmer i zatvoriti vezu po isteku
				timeouta

			Šta ako u četvrtom scenariju nijedan DR ne stigne do H2? Tada će
				sa strane H2 ostati otvorena konekcija beskonačno dugo.
				Jedno rešenje je da, ako u nekom vremenskom periodu ne stigne
				nijedan paket, konekcija se zatvara. Ovako, obe strane moraju
				periodično da šalju prazne pakete kako bi javile drugoj strani
				da su i dalje na vezi.
		</laza>
	</pitanje>

	<pitanje id='67'>
		<naslov>
			Protokol UDP
		</naslov>
		<prez>
			10/56:65
		</prez>
		<book>
			398:401
		</book>
		<laza>
			User Datagram Protocol prenosi Segmente koji se sastoje od
				zaglavlja od 8 bajtova i korisničkih podataka
			Redom to su: Izvorišni port, odredišni port, Dužina UDP segmenta
				i UDP suma provere (svaki po dva bajta)
			Prednost u odnosu na IP je što se zadaje izvorni i odredišni port
			Izvorni port u zaglavlju je potreban kada treba poslati odgovor
				pošiljaocu, ali ovo polje nije obavezno
			Dužina UDP paketa uključuje zaglavlje.
			Kontrolna suma nije obavezna, i ako se ne koristi popunjava se
				nulama. Za njeno računanje koristi se ceo UDP paket i, ako
				on putuje pomoću IP, IP pseudozaglavlje. Ako dužina UDP
				paketa nije deljiva sa 2 (broj bajtova), poslednjem bajtu se
				dopisuje 0 bajt. Sabiranje se vrši kao komplement jedinice.
				U komplementu jedinice broj nula ima dva zapisa, kao sve nule
				i sve jedinice. Za predstavljanje nule u checksumu koristi se
				zapis sa svim jedinicama. Isključivanje ovog izračunavanja
				se ne preporučuje
			Šta UDP ne radi:
			+ Ne upravlja tokom
			+ Ne vrši kontrolu grešaka
			+ Ne šalje ponovo pogrešno primljene segmente
			Šta radi:
			+ Predstavlja interfejs ka IP protokolu
			+ Demultipleksira procese koji istovremeno koriste različite
				portove
			Naročito je pogodan u klijent-server kombinacijama
			Remote Procedure Call - Birel i Nelzon (1984)
			Client stub i server stub se pozivaju od strane klijenta/servera
				i šalju parametre/odgovor drugoj strani
			Problemi - ako se ne radi o čistoj funkciji, ako se prenose
				pokazivači, ako se prenose nizovi
			Većina Internet aplikacija zahteva pouzdanu i uređenu isporuku, pa
				UDP nije uvek dovoljan
		</laza>
	</pitanje>

	<pitanje id='68'>
		<naslov>
			Protokol TCP: namena i model
		</naslov>
		<prez>
			10/65:70
		</prez>
		<book>
			404:405
		</book>
		<laza>
			Transmission Control Protocol - protokol za upravljanje prenosom
			Namena mu je da obezbedi pouzdan tok bajtova kroz nepouzdanu
				kombinovanu mrežu
			Svaki računar koji podržava TCP ima TCP transportnu jedinicu:
			+ kao proceduru u biblioteci
			+ kao korisnički proces
			+ kao deo jezgra OS
			U sva tri slučaja TCP jedinica radi sa TCP tokovima i obezbeđuje
				interfejs ka IP sloju
			Ova jedinica prihvata tokove korisničkih podataka od lokalnih
				procesa od najviše 64KB.
			Kako IP sloj ne garantuje da će datagrami biti ispravno isporučeni,
				transportna jedinica aktivira tajmere i po potrebi ponovo šalje
			TCP obezbeđuje pouzdanost koju IP protokol ne obezbeđuje
			Usluga TCP oživljava pošto obe strane kreiraju krajnje tačke veze,
				utičnice
			Svaka utičnica ima svoju adresu (32 bitna IP adresa računara
				i 16 bitni broj lokalnog porta)
			Portovi do 1024 su opšte poznati i rezervisani su za standardne
				usluge:
			Port, Protokol, Svrha
			21  , FTP     , Transfer fajlova
			23  , Telnet  , Login na daljinu
			25  , SMTP    , E-mail
			69  , TFTP    , Trivijalni protokol za transfer fajlova
			79  , Finger  , Traženje informacija o korisniku
			80  , HTTP    , WWW
			110 , POP3    , Udaljeni pristup E-mailu
			119 , NNTP    , USENET vesti

		</laza>
	</pitanje>

	<pitanje id='69'>
		<naslov>
			Protokol TCP: segmenti
		</naslov>
		<prez>
			10/71:83
		</prez>
		<book>
			405:409
		</book>
		<laza>
			Protokol TCP zasniva se na pretpostavci da svaka TCP veza
				održava svoj 32-bitni redni broj (sequence number).
			Transportne jedinice razmenjuju podatke u obliku segmenata koji
				sadrže 20-bajtno zaglavlje
			Veličinu segmenta određuje TCP softver
			Svaki TCP paket mora da stane u koristan teret IP paketa,
				65515 = (2^16-1) - 20 (IP header)
			Za svaku mrežu postoji najveća jedinica prenosa, npr. Ethernet ima
				ograničenje od 1500
			TCP segment sadrži:
			+ 16 bitova, izvorišni port (obavezan)
			+ 16 bitova, odredišni port
			+ 32 bita, redni broj
			+ 32 bita, broj potvrde
				Sledeći očekivani bajt. TCP numeriše sve bajtove
			+ 4 bita, dužinu TCP zaglavlja, broj 32-bitnih reči
				Polje opcije je promenljive dužine
			+ 6 bitova, neiskorišćeno - nakon više od 30 godina
			+ 6 flagova:
				URG - koristi se kada treba poslati urgentne podatke
					sadrži priraštaj koji treba dodati tekućem seq broju
					da bi se dobio redni broj segmenta sa hitnim podacima
					i predstavlja zamenu za slanje zahteva za prekid
				ACK - uključen je ako se koristi šlepovana potvrda
				PSH - nalaže primaocu da odmah isporuči podatke sloju iznad
				RST - ponovo se uspostavlja veza koja je oštećena usled
					pada računara ili nekog drugog razloga. Koristi se i za
					odbijanje neispravnih segmenata. Ukratko, ako je ovaj
					bit postavljen, negde postoji problem
				SYN - zahtev za uspostavu veze
				FIN - služi za zatvaranje veze
					SYN i FIN troše po jedan bajt rednih brojeva što garantuje
					obradu u ispravnom redosledu
			+ 16 bitova, veličina prozora
				Govori o tome koliko bajtova može da se primi. Dozvoljeno je
				0 - u tom slučaju potvrđujemo prijem ali obaveštavamo drugu
				stranu da trenutno ne možemo da primamo. Možemo da nastavimo
				da primamo tako što pošaljemo novi paket sa istim ack brojem
				i veličinom prozora većom od 0
			+ 16 bitova, suma provere
				Isti algoritam kao kod UDP, obuhvata i pseudozaglavlje
			+ 16 pokazivač na urgentne podatke
				Ranije opisan
			+ 32n bitova za opcije
				Omogućavaju uključivanje dodatnih mogućnosti, npr. da se zada
				maksimalan koristan TCP teret. Podrazumevana vrednost je 536,
				jer se od svakog računara na Internetu zahteva da prihvati
				TCP segmente dužine najmanje 556 bajtova. Ova dužina ne
				mora biti ista u oba smera
			+ Podaci
		</laza>
	</pitanje>

	<pitanje id='70'>
		<naslov>
			Protokol TCP: Raskidanje i uspostavljanje veze
		</naslov>
		<prez>
			10/84:86
		</prez>
		<book>
			409:411
		</book>
		<laza>
			Veze se uspostavljanju trostepenim usaglašavanjem. SYN troši
				jedan bajt kod rednog broja da bi mogao nedvosmisleno da
				se potvrdi
			Normalna uspostava veze:
			+ H1 šalje poruku SYN (x, ?)
			+ H2 odgovara sa SYN+ACK (y, x+1)
			+ H1 šalje ACK+DATA (x+1, y+1)
			Ako dve strane pokušaju da uspostave istovremeno vezu, uspostaviće
				se samo jedna veza jer vezu identifikuju krajnje tačke
			Za početni redni broj ne koristi se 0 već se koristi šema zasnovana
				na satu sa tikom svake 4 mikrosekunde
			Pri raskidanju veze koriste se tajmeri da bi se izbegao problem dve
				vojske
			Veza se raskida slanjem segmenta sa FIN bitom.
		</laza>
	</pitanje>

	<pitanje id='71'>
		<naslov>
			Sistem DNS i prostor imena
		</naslov>
		<prez>
			11/2:9
		</prez>
		<book>
			441:443
		</book>
		<laza>
			DNS - Domain Name System, sistem imenovanja domena
			Nije lako pamtiti IP adrese, zato se javila potreba za
				prevođenjem ASCII imena u numeričke IP adrese
			U ARPANETu je postojala datoteka host.txt
			Kasnije ovo nije bilo dovoljno pa je uveden DNS
			DNS je hijerarhijska struktura zasnovana na domenima
				i realizovana pomoću sistema distribuiranih baza
				podataka
			Resolver, razrešivač - preslikava ime domena u IP adresu
				upitom na DNS server
			Internet je podeljena na više od 200 osnovnih domena
			Domeni su podeljeni na poddomene
			Po jedan domen svakoj zemlji, domeni za različite delatnosti,
				int, com, org, edu, gov, mil, net
				biz, aero, ...
			Ovaj skup nije fiksan već se vremenom proširuje
			Do domena drugog nivoa dolazi se obraćanjem registratoru
				osnovnog domena
			Ime domena može biti apsolutno ili relativno (relativno se
				NE završava tačkom, apsolutno se završava tačkom, ovo
				je malo poznato ali stoji u specifikaciji RFC 1034)
			Celo ime domena može imati do 255 znakova a svaki deo do 63
			Svaki domen slobodno imenuje domene ispod sebe, imenovanje
				nije uniformno. Primer:
			+ cs.yale.edu
			+ cs.vu.nl
			+ cs.keio.ac.jp
			Za dodavanje novog domena potrebna je dozvola hijerarhijski višeg
				Ovo najčešće znači da treba da se plati ova registracija
			Imenovanje domena nije vezano za fizičke mreže već organizacione
				Primer

		</laza>
	</pitanje>

	<pitanje id='72'>
		<naslov>
			Zapisi resursa u sistemu DNS
		</naslov>
		<prez>
			11/10:28
		</prez>
		<book>
			443:446
		</book>
		<laza>
			Svakom domenu se može pridružiti skup zapisa
			Najčešći zapis je IP adresa računara
			Kada razrešivač DNS serveru preda ime domena, od njega dobije
				zapise resursa pridružene tom domenu, ovo je i osnovna
				funkcija DNS servera
			Zapis resursa je petorka:
			Ime domena, Životni vek, Klasa, Tip, Vrednost
			Ime domena je domen za koji važi zapis
			Životni vek je stabilnost zapisa - koliko sekundi se može
				smatrati da je zapis tačan
			Klasa - na internetu uvek ima vrednost IN
			Tip:Vrednost može imati sledeće vrednosti:
			+ SOA, sadrži ime osnovnog izvora informacija za zonu servera
				imena, elektronsku adresu njenog administratora, jedinstveni
				serijski broj i različite indikatore i rokove isključivanja
				tajmera
			+ A, najvažniji zapis, sadrži 32 bitnu adresu računara
				Neki računari mogu imati i više adresa. U tom slučaju
				moguće je konfigurisati server da ciklično odgovara na
				zahteve za IP adresom
			+ MX, sadrži ime računara koji se spreman da prihvati email za
				taj domen
			+ NS nabraja servere imena
			+ CNAME omogućava pravljenje alijasa
				abc 86400 IN CNAME def znači da je osnovno ime ustvari def,
				a abc je alijas
			+ PTR takođe ukazuje na drugo ime, ali za razliku od CNAME koji
				je u stvari definicija makroa, PTR zapis predstavlja
				regularan tip DNS podataka čije tumačenje zavisi od
				konteksta u kome je nađen. U praksi, gotovo uvek se koristi
				za reverse lookup (IP u ime)
			+ HINFO daje informacije o računaru i operativnom sistemu
			+ TXT omogućava domenu da se predstavi na proizvoljan način
		</laza>
	</pitanje>

	<pitanje id='73'>
		<naslov>
			Serveri imena u sistemu DNS
		</naslov>
		<prez>
			11/29:43
		</prez>
		<book>
			446:448
		</book>
		<laza>
			Root serveri, njihove IP adrese su opšte poznate i svaki od
				njih zna adrese svih name servera top-level domena i ima
				ih desetak širom sveta
			U teoriji, jedan server imena bi mogao da sadrži celu DNS
				bazu podataka. U praksi to ne bi funkcionisalo jer bi
				on bio preopterećen, a ako on otkaže, otkazao bi i ceo
				Internet, odnosno, ne bismo mogli da se povežemo na usluge
				koje normalno koristimo, jer ne pamtimo njihove IP adrese
			DNS prostor imena je podeljen na više disjunktnih zona
			Svaka zona sadrži deo stabla i servere imena sa informacijama
				o toj zoni
			
			Mehanizam dobijanja zapisa resursa:
			+ Razrešivač upućuje zahtev lokalnom serveru imena
			+ Ako traženi domen spada u zonu tog servera imena, server
				vraća meritorni (authoritative) zapise - zapis koji je
				sigurno ispravan. Kontrast sa keširanim zapisom
			+ U suprotnom, ovaj server će pitati svoj nadređeni server,
				i tako redom dok se ne dođe do zajedničkog pretka u stablu
				za lokalni server i ciljni
			+ flits.cs.vu.nl pita cs.vu.nl koji pita edu-server.net koji
				pita yale.edu koji pita cs.yale.edu koji zna gde je
				linda.cs.yale.edu
			Mehanizam je rekurzivan što omogućava svakom od usputnih servera
				da kešira odgovor. Još jednom, keširani podaci nisu meritorni

			Rekurzivno ispitivanje. Drugi način je da server saopštava klijentu
				ime sledećeg servera koji možda zna odgovor
			Ako ne dobije od jednog servera odgovor u doglednom vremenu,
				ističe tajmer i upit se postavlja narednom serveru imena

			Jednostavan protokol za pristup imenicama: LDAP, Light-weight
				Directory Access Protocol
		</laza>
	</pitanje>

	<pitanje id='74'>
		<naslov>
			Sistem elektronske pošte, arhitektura i usluge
		</naslov>
		<prez>
			11/44:54
		</prez>
		<book>
			448:451
		</book>
		<laza>
			Prvi sistemi za prenos elektronske pošte imali su samo protokol
				za prenos datoteka
			Pravilo je bilo da prvi red datoteke sadrži adresu primaoca
			Nedostaci:
			+ Nepogodno za slanje poruke grupi korisnika
			+ Poruke nemaju internu strukturu što otežava računarsku
				obradu (npr. prosleđivanje poruka)
			+ Pošiljalac ne zna da li je poruka stigla na odredište
			+ Nije lako organizovati prijem pošte u odsustvu (sekretarica)
			+ Korisničko okruženje je loše integrisano sa sistemom za prenos
				tj. poruka se piše u zasebnom programu pa se tek onda poziva
				program za slanje
			+ Poruke nisu mogle da istovremeno sadrže tekst, crteže, faks,
				glas, itd
			Sistem elektronske pošte obuhvata dva podsistema:
			+ Korisničkog agenta koji omogućava čitanje i sastavljanje poruka
				Lokalni programi koji obezbeđuju interfejs sa sistemom
			+ Agenta za prenos poruka
				najčešće daemon
			Podržavaju 5 osnovnih funkcija:
			+ Sastavljanje poruka
			+ Prenos
				obuhvata uspostavu veze, slanje i raskidanje veze, treba da
				radi automatski
			+ Izveštavanje
				da li je poruka stigla
			+ Prikaz dolaznih poruka
			+ Obrada
				mogućnost odbacivanja primljenih poruka pre/posle čitanja,
				ponovnog čitanja starijih poruka, prosleđivanje, mogućnost
				neke druge obrade
			Neki sistemi pružaju i složenije usluge:
			+ Forwarding
			+ Mailing liste
			+ Kopiranje poruka
			+ Slanje nevidljivih kopija
			+ Enkripcija

			Omotnica poruke, zaglavlje poruke i sadržaj i njen sadržaj
				analogija sa klasičnom poštom
			Omotnica služi podatke potrebne za prenos poruke, npr. adresu
				Agenti koriste za usmeravanje
			Zaglavlje sadrži upravljačke podatke namenjene korisničkim agentima
			Telo je namenjeno primaocu
		</laza>
	</pitanje>

	<pitanje id='75'>
		<naslov>
			Korisnički agenti u sistemu elektronske pošte
		</naslov>
		<prez>
			11/55:62
		</prez>
		<book>
			451:453
		</book>
		<laza>
			Korisnički agent prihvata komande za:
			+ Sastavljanje poruka
			+ Odgovaranja na poruke
			+ Rad sa poštanskim sandučićima (mailbox)
			Za slanje poruke korisnik mora da ima:
			+ Spremnu poruku
			+ Odredišnu adresu
			+ Druge parametre
			Većina email sistema podržava mailing liste
			Opis rada sa korisničkim agentom
			Kolone, flegovi
			+ K - pročitana
			+ A - odgovoreno
			+ F - prosleđena
			+ postoje i drugi
			Kod nekih sistema korisnik može da izabere šta će da se prikaže
				tako što definiše svoj korisnički profil

		</laza>
	</pitanje>

	<pitanje id='76'>
		<naslov>
			Format RFC 822
		</naslov>
		<prez>
			11/63:66
		</prez>
		<book>
			453:454
		</book>
		<laza>
			Format poruka može biti tekstualni (primer RFC 822) ili multi-
				medijalni, primer MIME
			RFC 822 sadrži:
			+ jednostavnu omotnicu
			+ zaglavlje od nekoliko polja
			+ prazan red
			+ tekst poruke
			Neki od headera su To, Cc, Bcc, From, Sender, Received,
				Return-Path
			Osim ovih, može biti i još ovih polja: Date, Reply-To, Message-Id,
				In-Reply-To, References, Keywords, Subject
			U početku je email bio isključivo za ASCII tekst pa je RFC 822 bio
				dovoljan, međutim danas to nije slučaj iz sledećih razloga:
			+ Poruka je na jeziku koji ne koristi samo engleska slova
			+ Poruka ne sadrži (samo) tekst već zvuk ili sliku
		</laza>
	</pitanje>

	<pitanje id='77'>
		<naslov>
			Format MIME
		</naslov>
		<prez>
			11/67:84
		</prez>
		<book>
			454:459
		</book>
		<laza>
			Format MIME rešava probleme koji su postojali kod RFC 822
			U telo poruke uvodi strukturu i definiše pravila kodiranja
				netekstualnih poruka, ali u osnovi i dalje omogućava
				korišćenje formata prema dokumentu RFC 822 što značo
				da se poruke i dalje mogu razmenjivati pomoću starijih
				programa
			Treba promeniti samo programe za slanje i primanje poruka, što
				mogu da učine sami korisnici
			Pet novih zaglavlja:
			+ MIME-Version
				Identifikuje MIME verziju i označava da se koristi MIME
				format. Ako ga nema smatra se da se koristi RFC
			+ Content-Description
				Sadrži tekst sa opisom sadržaja poruke, naslov
			+ Content-Id
				Identifikuje sadržaj, koristi se isti format kao i za polje
				Message-ID osnovnog zaglavlja
			+ Content-Transfer-Encoding
				Saopštava način prelamanja (kodiranja) poruka
				Pet načina prelamanja:
				+ Običan 7-bitni ASCII, nijedan red ne sme da ima više od 1000
					karaktera
				+ 8-bit prošireni ASCII, isto
				+ Base64 odnosno ASCII armor, algoritam za konverziju, može
					se poslati bilo kakva binarna datoteka
				+ Quoted-printable
					Samo ASCII znaci sa kodom većim od 127 se kodiraju i to
					pomoću znaka jednakosti i hex koda
				+ Korisnik može sam definisati način kodiranja
			+ Content-Type:
				tip/podtip
				Primer: video/mpeg
				Vredno pomena: multipart/mixed, alternative, parallel, digest
		</laza>
	</pitanje>

	<pitanje id='78'>
		<naslov>
			Protokol SMTP
		</naslov>
		<prez>
			11/85:92
		</prez>
		<book>
			459:461
		</book>
		<laza>
			Simple Mail Transfer Protocol - jednostavan protokol za prenos
				pošte
			Sistem prenosa poruke bavi se upućivanjem poruke od pošiljaoca
				do primaoca
			Najjednostavnije je da se prethodno uspostavi veza između izvornog
				i odredišnog računara ali postoje situacije kada to ne ide
			Email se na Internetu isporučuje tako što izvorni računar uspostavi
				TCP vezu sa portom 25 odredišnog računara.
			Na tom portu osluškuje sistemski servis koji razume SMTP
			Ova usluga prvo uspostavlja vezu a zatim kopira poruke sa njih u
				odgovarajuće mailboxove
			Ako se poruka ne može isporučiti vraća se izveštaj o grešci
			Jednostavan protokol, Prvo se server predstavlja, zatim klijent,
				pa klijent kaže za koga je poruka i ko je šalje. Ako server
				prihvati, klijent kaže DATA, nakon čega mu server kaže
				kako da završi poruku. Klijent tada pošalje poruku, server
				odgovara da je sve u redu, klijent kaže QUIT i veza se zatvara
			Iako je SMTP dobro definisan mogu da se jave i problemi:
			+ Dužina poruke, neke stare realizacije ne mogu da obrade poruke
				duže od 64KB
			+ Ako klijent i server imaju različito podešene tajmere, jedan od
				njih može odustati usred posla
			+ Da bi se ovi problemi rešili definisan je ESMTP, klijent koji
				želi da koristi ovaj protokol šalje EHLO
		</laza>
	</pitanje>

	<pitanje id='78'>
		<naslov>
			Protokol POP3
		</naslov>
		<prez>
			11/93:103
		</prez>
		<book>
			461:464
		</book>
		<laza>
			Ako potencijalni primalac nije trenutno na vezi, ne može da se
				uspostavi TCP veza. Jedno rešenje je da agent za prenos
				poruka na ISP računaru prihvata poštu za svoje korisnike i
				da je smešta u njihove mailboxove
			POP3 - Post Office Protocol verzija 3, služi za preuzimanje pošte
				sa udaljenog poštanskog sandučeta
			Dijagram kada je primalac morao da bude na vezi i kad ne mora
			TCP port 110
			Tri faze:
			+ Ovlašćivanje (username i password)
			+ Transakcije, preuzimaju se poruke, obeležavaju se za brisanje
			+ Ažuriranje (brišu se obeležene poruke)
			Naredbe su USER, PASS, LIST, RETR, DELE, QUIT
		</laza>
	</pitanje>

	<pitanje id='80'>
		<naslov>
			Arhitektura veba: klijentski i serverski deo
		</naslov>
		<prez>
			11/104:113
		</prez>
		<book>
			466:475
		</book>
		<laza>
			WWW - World Wide Web, globalna mreža
			WWW predstavlja strukturu namenjenu pristupanju povezanim
				dokumentima iz milion računara širom interneta
			Distribuirani sistem koji brzo raste
			Popularan zbog bogatom grafičkog interfejsa, lakoće korišćenja
				i obilja informacija
			Začet u CERN-u 1989 iz potrebe da se dobijeni podaci distribuiraju
				udaljenim korisnicima širom sveta koji timskim radom vrše
				analizu i razmenjuju podatke
			Prvi put pušten u rad tekstualni prototip.
			1991. prva javna demonstracija WWW u San Antoniju

			Iz ugla korisnika, veb je ogromna globalna zbirka dokumenata
				zvanih Veb strane
			Na svakoj strani mogu biti hiperveze ka drugim stranama
			Mogućnost da jedna strana ukazuje na drugu (hipertekst) smislio
				je Vanevar Buš, profesor elektronike na MITu još 1945. god
			Stranice se gledaju pomoću programa zvanog Veb brauzer, čitač,
				pretraživač. Danas su popularni Chrome, Firefox, ranije
				Internet Explorer, Netscape
			Mehanizam kojim se sa servera dovlači strana, preko HTTP, port 80
		</laza>
	</pitanje>

	<pitanje id='81'>
		<naslov>
			Arhitektura veba: URL
		</naslov>
		<prez>
			11/114:121
		</prez>
		<book>
			475:477
		</book>
		<laza>
			Ugrađena hiperveza mora na neki način da ukazuje na određenu stranu
			Svaka strana na Web-u ima tzv jedinstvenu adresu resursa (URL)
			URL se sastoji iz 3 dela:
			+ Imena protokola: http, ftp, https, ...
			+ DNS imena računara na kome se stranica nalazi "google.com"
			+ Ime datoteke koja predstavlja stranu "/products.html/"
			Kada korisnik pritisne vezu, čitač preduzima niz koraka da bi
				preuzeo odabranu stranu
			+ Prvo čitač određuje URL na osnovu onoga što je korisnik pritiso
			+ Čitač od DNS servera traži IP adresu računara iz DNS dela URLa
			+ DNS server odgovara sa IP adresom
			+ Čitač upostavlja TCP vezu sa odgovarajućim portom na računaru
				za HTTP to je port 80
			+ Čitač zahteva datoteku iz trećeg dela URLa, npr.
				"/home/index.html"
			+ Server odgovara sa sadržajem te datoteke
			+ TCP veza se raskida
			+ Čitač prikazuje sadržaj dobijene datoteke
			+ Čitač preuzima i prikazuje sve slike u toj datoteci, ako ih ima
				Isto važi i za ostale eksterne sadržaje

			Sa strane servera to izgleda ovako:
			+ Prihvataju se TCP veze sa klijentima (čitačima)
			+ Dobija se zahtev, odakle se vadi ime zahtevane datoteke
			+ Preuzima se datoteka sa diska
			+ Šalje se klijentu
			+ Veza se raskida

			Neki od protokola:
			Ime   , Svrha         , Primer
			http  , Hipertekst    , http://www.cs.vu.nl/~ast/
			file  , FTP           , ftp://ftp.cs.vu.nl/pub/minix/README
			file  , Lokalni fajl  , file:///usr/suzanne/prog.c
			news  , Grupa za vesti, news:comp.os.minix
			news  , Ćlanak vesti  , news:AA0134223112@cs.utah.edu
			gopher, Gopher        , gopher://gopher.tc.umn.edu/11/Libraries
			mailto, Slanje emaila , mailto:JohnUser@acm.org
			telnet, Udaljeni login, telnet://www.w3.org:80
		</laza>
	</pitanje>

</ispit>

<!--

	<pitanje id='0'>
		<naslov>

		</naslov>
		<prez>

		</prez>
		<book>

		</book>
		<laza>

		</laza>
	</pitanje>

-->
